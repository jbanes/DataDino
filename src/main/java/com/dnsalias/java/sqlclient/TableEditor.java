/*
 * TableEditor.java
 */

package com.dnsalias.java.sqlclient;

import java.awt.*;
import java.sql.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.table.*;

import com.dnsalias.java.sqlclient.dialog.*;
import com.dnsalias.java.sqlclient.validation.*;

/**
 *
 * @author  jbanes
 */
public class TableEditor extends JInternalFrame implements TableModelListener
{
    private SQLClientHandler handler;
    private DefaultTableModel model;
    private String[] columnNames = {"PK", "Name", "Type", "Length", "Null?"};
    
    private static final int NAME = 0;
    private static final int TYPE = 1;
    private static final int LENGTH = 2;
    private static final int NULL = 3;
    
    public TableEditor(SQLClientHandler handler) 
    {
        this.handler = handler;
        
        initComponents();
        
        String[] choices = handler.getCurrentProfile().getDataTypes();
        JComboBox combo = new JComboBox(choices);
        LengthEditor editor = new LengthEditor();
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        
        combo.setEditable(true);
        
        model = (DefaultTableModel) columns.getModel();
        columns.getColumn("Type").setCellEditor(new DefaultCellEditor(combo));
        columns.getColumn("Length").setCellEditor(new DefaultCellEditor(editor));
        
        renderer.setHorizontalAlignment(SwingConstants.RIGHT);
        columns.getColumn("Length").setCellRenderer(renderer);
        
        model.addTableModelListener(this);
        
        pack();
        show();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents()//GEN-BEGIN:initComponents
    {
        toolbar = new javax.swing.JToolBar();
        add = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        panel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        tableLabel = new javax.swing.JLabel();
        table = new javax.swing.JTextField();
        primaryKeyLabel = new javax.swing.JLabel();
        primaryKey = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        save = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        scrollable = new javax.swing.JScrollPane();
        columns = new javax.swing.JTable();
        
        setMaximizable(true);
        setTitle("Table Editor");
        setIconifiable(true);
        setResizable(true);
        setClosable(true);
        add.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Add16.gif")));
        add.setToolTipText("Add");
        add.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                addActionPerformed(evt);
            }
        });
        
        toolbar.add(add);
        
        delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Delete16.gif")));
        delete.setToolTipText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                deleteActionPerformed(evt);
            }
        });
        
        toolbar.add(delete);
        
        getContentPane().add(toolbar, java.awt.BorderLayout.NORTH);
        
        panel.setLayout(new java.awt.GridLayout(2, 1));
        
        tableLabel.setText("Table Name");
        jPanel1.add(tableLabel);
        
        table.setColumns(12);
        jPanel1.add(table);
        
        primaryKeyLabel.setText("Primary Key");
        jPanel1.add(primaryKeyLabel);
        
        primaryKey.setEditable(true);
        jPanel1.add(primaryKey);
        
        panel.add(jPanel1);
        
        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));
        
        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                saveActionPerformed(evt);
            }
        });
        
        jPanel2.add(save);
        
        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cancelActionPerformed(evt);
            }
        });
        
        jPanel2.add(cancel);
        
        panel.add(jPanel2);
        
        getContentPane().add(panel, java.awt.BorderLayout.SOUTH);
        
        columns.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][]
        {
            
        },
        new String []
        {
            "Name", "Type", "Length", "Null?"
        }
        )
        {
            Class[] types = new Class []
            {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            
            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }
        });
        columns.setPreferredScrollableViewportSize(new java.awt.Dimension(450, 300));
        scrollable.setViewportView(columns);
        
        getContentPane().add(scrollable, java.awt.BorderLayout.CENTER);
        
        pack();
    }//GEN-END:initComponents

    private void cancelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelActionPerformed
    {//GEN-HEADEREND:event_cancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveActionPerformed
    {//GEN-HEADEREND:event_saveActionPerformed
        StringBuffer sql = new StringBuffer("create table "+table.getText()+" (");
        int rows = model.getRowCount();
        
        for(int i=0; i<rows; i++)
        {
            sql.append(model.getValueAt(i, NAME));
            sql.append(' ');
            sql.append(model.getValueAt(i, TYPE));
            
            if(handler.getCurrentProfile().isResizable(model.getValueAt(i, TYPE).toString()) && model.getValueAt(i, LENGTH).toString().trim().length() > 0)
            {
                sql.append("("+model.getValueAt(i, LENGTH)+")");
            }
            
            sql.append(' ');
            
            if(!((Boolean)model.getValueAt(i, NULL)).booleanValue()) sql.append("NOT NULL");
            
            if(primaryKey.getSelectedIndex() >= 0 && primaryKey.getSelectedItem().equals(model.getValueAt(i, NAME)))
                sql.append(" PRIMARY KEY");
            
            if(i+1 < rows) sql.append(" ,");
        }
        
        sql.append(')');
        
        System.out.println(sql);
        
        try
        {
            handler.executeSQLChange(sql.toString());
            this.dispose();
        }
        catch(SQLException e)
        {
            e.printStackTrace();
            
            Container parent = this;
            
            while(parent.getParent() != null) parent = parent.getParent();
            ErrorReport.displayError(e, (Frame)parent);
        }
    }//GEN-LAST:event_saveActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteActionPerformed
    {//GEN-HEADEREND:event_deleteActionPerformed
        // Add your handling code here:
        ListSelectionModel selectModel = columns.getSelectionModel();
        int length = model.getRowCount();
        
        for(int i=0; i<length; i++)
        {
            if(selectModel.isSelectedIndex(i))
            {
                model.removeRow(i);
                i--;
            }
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addActionPerformed
    {//GEN-HEADEREND:event_addActionPerformed
        // Add your handling code here:
        Object[] rowData = {"", "VARCHAR", 25, true};
        
        model.addRow(rowData);
    }//GEN-LAST:event_addActionPerformed

    public void tableChanged(TableModelEvent evt)
    {
        int rowCount = model.getRowCount();
        int column = NAME; //evt.getColumn();
        boolean set = false;
        
        Object selected = primaryKey.getSelectedItem();
        
        if(column != NAME) return;
        
        primaryKey.removeAllItems();
        
        for(int i=0; i<rowCount; i++)
        {
            Object object = model.getValueAt(i, column);
            
            if(object != null) primaryKey.addItem(object);
            if(selected != null && object != null && selected.equals(object)) 
            {
                primaryKey.setSelectedItem(selected);
                set = true;
            }
        }
        
        
        if(primaryKey.getItemCount() > 0 && !set) primaryKey.setSelectedIndex(0);
        else if(!set) primaryKey.setSelectedItem(null);
    }    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar toolbar;
    private javax.swing.JButton add;
    private javax.swing.JButton delete;
    private javax.swing.JPanel panel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel tableLabel;
    private javax.swing.JTextField table;
    private javax.swing.JLabel primaryKeyLabel;
    private javax.swing.JComboBox primaryKey;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton save;
    private javax.swing.JButton cancel;
    private javax.swing.JScrollPane scrollable;
    private javax.swing.JTable columns;
    // End of variables declaration//GEN-END:variables

}
