/*
 * DBLogin.java
 *
 */

package com.dnsalias.java.sqlclient;

import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import java.util.*;

import javax.swing.*;
import javax.swing.event.*;
import javax.swing.table.*;

import com.dnsalias.java.sqlclient.dialog.*;
import com.dnsalias.java.sqlclient.drivers.*;
import com.dnsalias.java.sqlclient.util.*;
import com.dnsalias.java.sqlclient.xml.*;

/**
 *
 * @author  jbanes
 */
public class DBLogin extends JInternalFrame implements Runnable
{
    private ProfileParser profileParser = new ProfileParser();
    private ArrayList savedItems;
    
    private int clicks = 0;
    private long lastClick = 0;
    
    /** Creates new form DBLogin */
    public DBLogin() 
    {
        ApplicationSettings settings = ApplicationSettings.getInstance();
        
        String database = settings.getProperty("dblogin.database");
        String port = settings.getProperty("dblogin.port");
        String username = settings.getProperty("dblogin.username");
        String host = settings.getProperty("dblogin.host");
        String profile = settings.getProperty("dblogin.profile");
        
        initComponents();
        
        Profile[] profiles = profileParser.getProfiles();
        
        for(int i=0; i<profiles.length; i++)
        {
            this.profile.addItem(profiles[i].name);
        }
        
        if(database != null) this.database.setText(database);
        if(port != null) this.port.setText(port);
        if(username != null) this.username.setText(username);
        if(host != null) this.hostname.setText(host);
        if(profile != null) this.profile.setSelectedItem(profile);
        
        savedLogins.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        savedLogins.getSelectionModel().addListSelectionListener(new ListSelectionListener()
        {
            public void valueChanged(ListSelectionEvent evt)
            {
                if(savedLogins.getSelectedRow() >= 0) displayInfo(savedLogins.getSelectedRow());
                clicks = 0;
            }
        });
        
        savedLogins.addMouseListener(new MouseAdapter()
        {
            public void mousePressed(MouseEvent evt)
            {
                if(System.currentTimeMillis()-lastClick > 1500) clicks = 0;
                
                clicks++;
                lastClick = System.currentTimeMillis();
                
                if(clicks > 1)
                {
                    okActionPerformed(null);
                    clicks = 0;
                }
            }
        });
        
        loadInfo();
        
        if(savedItems != null && savedItems.size() > 0) displayInfo(0);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel1 = new javax.swing.JPanel();
        hostLabel = new javax.swing.JLabel();
        hostname = new javax.swing.JTextField();
        portLabel = new javax.swing.JLabel();
        port = new javax.swing.JTextField();
        usernameLabel = new javax.swing.JLabel();
        username = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        password = new javax.swing.JPasswordField();
        dbLabel = new javax.swing.JLabel();
        database = new javax.swing.JTextField();
        profileLabel = new javax.swing.JLabel();
        profile = new javax.swing.JComboBox();
        savepassLabel = new javax.swing.JLabel();
        savepass = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        buttonSpacer = new javax.swing.JPanel();
        ok = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        logo = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        savedLogins = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setTitle("Login");
        setDefaultCloseOperation(1);
        setMinimumSize(new java.awt.Dimension(320, 200));
        setPreferredSize(new java.awt.Dimension(320, 200));
        jPanel1.setLayout(new java.awt.GridLayout(0, 2, 6, 4));

        jPanel1.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(4, 4, 4, 4)));
        jPanel1.setPreferredSize(new java.awt.Dimension(250, 178));
        hostLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        hostLabel.setText("Hostname:");
        jPanel1.add(hostLabel);

        hostname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okActionPerformed(evt);
            }
        });

        jPanel1.add(hostname);

        portLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        portLabel.setText("Port:");
        jPanel1.add(portLabel);

        port.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okActionPerformed(evt);
            }
        });

        jPanel1.add(port);

        usernameLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        usernameLabel.setText("Username:");
        jPanel1.add(usernameLabel);

        username.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okActionPerformed(evt);
            }
        });

        jPanel1.add(username);

        passwordLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        passwordLabel.setText("Password:");
        jPanel1.add(passwordLabel);

        password.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okActionPerformed(evt);
            }
        });

        jPanel1.add(password);

        dbLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        dbLabel.setText("Database:");
        jPanel1.add(dbLabel);

        database.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okActionPerformed(evt);
            }
        });

        jPanel1.add(database);

        profileLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        profileLabel.setText("Profile:");
        jPanel1.add(profileLabel);

        jPanel1.add(profile);

        savepassLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        savepassLabel.setText("Save Password?");
        jPanel1.add(savepassLabel);

        savepass.setNextFocusableComponent(ok);
        jPanel1.add(savepass);

        getContentPane().add(jPanel1, java.awt.BorderLayout.WEST);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        buttonSpacer.setPreferredSize(new java.awt.Dimension(100, 10));
        jPanel2.add(buttonSpacer);

        ok.setText("Ok");
        ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okActionPerformed(evt);
            }
        });

        jPanel2.add(ok);

        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        jPanel2.add(cancel);

        jLabel1.setMinimumSize(new java.awt.Dimension(40, 10));
        jLabel1.setPreferredSize(new java.awt.Dimension(60, 10));
        jPanel2.add(jLabel1);

        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/loginlogo.png")));
        logo.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel2.add(logo);

        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel3.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(4, 4, 4, 4)));
        savedLogins.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Username", "Hostname", "Database", "Profile"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        savedLogins.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(savedLogins);

        jPanel3.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        setSize(new java.awt.Dimension(580, 260));
    }//GEN-END:initComponents

    private void cancelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelActionPerformed
    {//GEN-HEADEREND:event_cancelActionPerformed
        if(ApplicationSettings.getInstance().isMacOSX()) System.exit(0);
        
        setVisible(false);
        ((JDesktopPane)getParent()).remove(this);
    }//GEN-LAST:event_cancelActionPerformed

    private void okActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_okActionPerformed
    {//GEN-HEADEREND:event_okActionPerformed
        //Thread thread = new Thread(this);
        ApplicationSettings settings = ApplicationSettings.getInstance();
        Profile selectedProfile = profileParser.getProfile(this.profile.getSelectedItem().toString());
        
        if(selectedProfile.getProperty("professional-only") != null && !settings.isRegisteredVersion())
        {
            JOptionPane.showMessageDialog(this, 
                "<html><body><table width=\"300\"><tr><td>"       + 
                selectedProfile.getProperty("professional-only")  +
                "</td></tr></table></body></html>",
                "", JOptionPane.INFORMATION_MESSAGE);
            
            return;
        }
        
        if(selectedProfile.getProperty("driver-warning") != null)
        {
            int option = JOptionPane.showConfirmDialog(this, 
                "<html><body><table width=\"300\"><tr><td>"    + 
                selectedProfile.getProperty("driver-warning")  +
                "</td></tr></table></body></html>",
                "", JOptionPane.OK_CANCEL_OPTION, 
                JOptionPane.WARNING_MESSAGE);
            
            if(option > 0) return;
        }
        
        ThreadPool.run(this);
    }//GEN-LAST:event_okActionPerformed

    public void displayInfo(int item)
    {
        Properties props = (Properties)savedItems.get(item);
        
        database.setText(props.getProperty("dblogin.database"));
        port.setText(props.getProperty("dblogin.port"));
        username.setText(props.getProperty("dblogin.username"));
        hostname.setText(props.getProperty("dblogin.host"));
        profile.setSelectedItem(props.getProperty("dblogin.profile"));
        
        if(props.containsKey("dblogin.password"))
        {
            if(props.get("dblogin.password") instanceof String) password.setText(props.getProperty("dblogin.password"));
            else password.setText(decode((short[])props.get("dblogin.password")));
                
            savepass.setSelected(true);
        }
        else
        {
            password.setText("");
            savepass.setSelected(false);
        }
    }
    
    private short[] encode(String data)
    {
        short[] encoded = new short[data.length()];
        
        for(int i=0; i<encoded.length; i++)
        {
            encoded[i] = (short)(data.charAt(i) ^ 0xFFFF);
        }
        
        return encoded;
    }
    
    private String decode(short[] data)
    {
        char[] decoded = new char[data.length];
        
        for(int i=0; i<decoded.length; i++)
        {
            decoded[i] = (char)(data[i] ^ 0xFFFF);
        }
        
        return new String(decoded);
    }
    
    public void loadInfo()
    {
        ApplicationSettings settings = ApplicationSettings.getInstance();
        Properties props;
        DefaultTableModel model = new DefaultTableModel(new Object[]{"Username", "Hostname", "Database", "Profile"}, 0)
        {
            public boolean isCellEditable(int row, int col)
            {
                return false;
            }
        };
        
        savedItems = (ArrayList)settings.loadPersistentObject("login");
        
        if(savedItems == null) savedItems = new ArrayList();
        
        for(int i=0; i<savedItems.size(); i++)
        {
            props = (Properties)savedItems.get(i);
            
            model.addRow(new Object[]{
                props.getProperty("dblogin.username"),
                props.getProperty("dblogin.host"),
                props.getProperty("dblogin.database"),
                props.getProperty("dblogin.profile")});
        }
        
        savedLogins.setModel(model);
    }
    
    public void saveInfo()
    {
        ApplicationSettings settings = ApplicationSettings.getInstance();
        Properties props = new Properties();
        Properties propsPass;
        int location;
        
        /*settings.setPesistentProperty("dblogin.database", database.getText());
        settings.setPesistentProperty("dblogin.port", port.getText());
        settings.setPesistentProperty("dblogin.username", username.getText());
        settings.setPesistentProperty("dblogin.host", hostname.getText());
        settings.setPesistentProperty("dblogin.profile", profile.getSelectedItem().toString());*/
        
        props.setProperty("dblogin.database", database.getText());
        props.setProperty("dblogin.port", port.getText());
        props.setProperty("dblogin.username", username.getText());
        props.setProperty("dblogin.host", hostname.getText());
        props.setProperty("dblogin.profile", profile.getSelectedItem().toString());
        
        propsPass = new Properties(props);
        propsPass.put("dblogin.password", encode(password.getText()));
        
        while((location = find(props)) >= 0) savedItems.remove(location);
        if(savedItems.size() > 10) savedItems.remove(savedItems.size()-1);
        
        if(savepass.isSelected()) savedItems.add(0, propsPass);
        else savedItems.add(0, props);
 
        settings.savePersistentObject("login", savedItems);
        
        loadInfo();
    }
    
    private int find(Properties obj)
    {
        String left;
        String right;
        Properties props;
        boolean match = true;
        
        String[] items = {"dblogin.database", "dblogin.port", "dblogin.username", "dblogin.host", "dblogin.profile"};
        
        for(int i=0; i<savedItems.size(); i++)
        {
            props = (Properties)savedItems.get(i);
            match = true;
            
            for(int j=0; j<items.length; j++)
            {
                left = props.getProperty(items[j]);
                right = obj.getProperty(items[j]);
                
                if((left == null || right == null) && left != right) match = false;
                else if(!left.equals(right)) match = false;
            }
            
            if(match) return i;
        }
        
        return -1;
    }
    
    public void run()
    {
        Component parent = this;
        
        while(parent.getParent() != null) parent = parent.getParent();
        
        MDIFrame.connected();
        
        try
        {
            Profile profile = profileParser.getProfile(this.profile.getSelectedItem().toString());
            SQLClientHandler handler;
            
            if(DownloadMonitor.download((Frame)parent, profile.loadDriver()))
            {
                parent.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                
                handler = new StandardClient(profile);

                profile.host = hostname.getText();
                profile.port = port.getText();
                profile.username = username.getText();
                profile.password = password.getText();
                profile.database = database.getText();

                handler.openConnection();
                handler.setCurrentHandler(handler);
                
                saveInfo();
                MDIFrame.showSchemaBrowser();
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Failed to load device driver!", "Error", JOptionPane.ERROR_MESSAGE);
                System.out.println("Failed to load device driver!");
                MDIFrame.disconnected();
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
            
            ErrorReport.displayError(
                "Could not connect to database! Please verify that the<br>"
                + "information you entered is correct for your database,<br>"
                + "and that your username and password are correct.", e, (Frame)parent);
            
            MDIFrame.disconnected();
        }
        finally
        {
            parent.setCursor(Cursor.getDefaultCursor());
        }
    }    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonSpacer;
    private javax.swing.JButton cancel;
    private javax.swing.JTextField database;
    private javax.swing.JLabel dbLabel;
    private javax.swing.JLabel hostLabel;
    private javax.swing.JTextField hostname;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel logo;
    private javax.swing.JButton ok;
    private javax.swing.JPasswordField password;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JTextField port;
    private javax.swing.JLabel portLabel;
    private javax.swing.JComboBox profile;
    private javax.swing.JLabel profileLabel;
    private javax.swing.JTable savedLogins;
    private javax.swing.JCheckBox savepass;
    private javax.swing.JLabel savepassLabel;
    private javax.swing.JTextField username;
    private javax.swing.JLabel usernameLabel;
    // End of variables declaration//GEN-END:variables

}
