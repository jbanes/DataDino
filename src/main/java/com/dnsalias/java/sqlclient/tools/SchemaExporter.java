/*
 * SchemaExporter.java
 *
 * Created on May 18, 2002, 3:15 PM
 */

package com.dnsalias.java.sqlclient.tools;

import java.awt.*;
import java.io.*;
import java.sql.*;
import java.util.*;

import javax.swing.*;

import com.dnsalias.java.sqlclient.*;
import com.dnsalias.java.sqlclient.dialog.*;
import com.dnsalias.java.sqlclient.ui.*;
import com.dnsalias.java.sqlclient.util.*;

/**
 *
 * @author  jbanes
 */
public class SchemaExporter extends JInternalFrame 
{
    private SQLClientHandler handler;
    
    public SchemaExporter() 
    {
        initComponents();
        
        setBackground(optionsPanel.getBackground());
        handler = SQLClientHandler.getCurrentHandler();
        
        loadTables();
    }
    
    private void loadTables()
    {
        //try
        {
            new TableListLoader(null, "TABLE");
        }
        /*catch(SQLException e)
        {
            e.printStackTrace();
            
            Component parent = this;
            
            while(parent.getParent() != null) parent = parent.getParent();
            
            ErrorReport.displayError("Could not load table liat!", e, (Frame)parent);
        }*/
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents()//GEN-BEGIN:initComponents
    {
        title = new javax.swing.JLabel();
        tablesScroll = new javax.swing.JScrollPane();
        tablesList = new javax.swing.JList();
        filename = new javax.swing.JTextField();
        browse = new javax.swing.JButton();
        filenameLabel = new javax.swing.JLabel();
        optionsPanel = new javax.swing.JPanel();
        genDrop = new javax.swing.JCheckBox();
        status = new javax.swing.JLabel();
        buttonPanel = new javax.swing.JPanel();
        export = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        
        getContentPane().setLayout(null);
        
        setTitle("Schema Export");
        setIconifiable(true);
        setClosable(true);
        title.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/schemaexporter/selecttables2.png")));
        title.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        getContentPane().add(title);
        title.setBounds(10, 10, 204, 29);
        
        tablesList.setToolTipText("<html>\n<body>\nSelect the tables you wish to export. Hold down the CTRL key<br>\nwhile clicking in order to select multiple tables.\n</body>\n</html>");
        tablesScroll.setViewportView(tablesList);
        
        getContentPane().add(tablesScroll);
        tablesScroll.setBounds(10, 50, 210, 250);
        
        filename.setToolTipText("<html>\n<body>\nEnter the name of the file you wish to export the schema<br>\nto. The schema will be stored in standard SQL.\n</body>\n</html>\n");
        getContentPane().add(filename);
        filename.setBounds(240, 70, 190, 21);
        
        browse.setText("Browse...");
        browse.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                browseActionPerformed(evt);
            }
        });
        
        getContentPane().add(browse);
        browse.setBounds(440, 70, 87, 27);
        
        filenameLabel.setText("File name:");
        getContentPane().add(filenameLabel);
        filenameLabel.setBounds(240, 50, 180, 17);
        
        optionsPanel.setLayout(null);
        
        optionsPanel.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.EtchedBorder(), "Options"));
        genDrop.setText("Generate Drop?");
        optionsPanel.add(genDrop);
        genDrop.setBounds(20, 30, 240, 25);
        
        getContentPane().add(optionsPanel);
        optionsPanel.setBounds(240, 120, 280, 90);
        
        status.setText("Ready");
        status.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        status.setBorder(new javax.swing.border.EtchedBorder());
        getContentPane().add(status);
        status.setBounds(250, 230, 260, 24);
        
        buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));
        
        export.setText("Export");
        export.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                exportActionPerformed(evt);
            }
        });
        
        buttonPanel.add(export);
        
        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cancelActionPerformed(evt);
            }
        });
        
        buttonPanel.add(cancel);
        
        getContentPane().add(buttonPanel);
        buttonPanel.setBounds(270, 270, 270, 40);
        
        setBounds(50, 50, 560, 350);
    }//GEN-END:initComponents

    private void exportActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_exportActionPerformed
    {//GEN-HEADEREND:event_exportActionPerformed
        Object[] tables = tablesList.getSelectedValues();
        String currentTable = null;
        
        if(tables.length < 1)
        {
            JOptionPane.showMessageDialog(this, "You must select at least one table to export.", "", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(filename.getText().trim().length() < 1)
        {
            JOptionPane.showMessageDialog(this, "You must select a file to save the schema to.", "", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try
        {
            TableExporter exporter;
            PrintWriter out = new PrintWriter(new FileOutputStream(filename.getText()));
            
            for(int i=0; i<tables.length; i++)
            {
                currentTable = tables[i].toString();
                
                status.setText("Generating "+currentTable+"...");
                status.paintImmediately(0, 0, status.getWidth(), status.getHeight());
                
                exporter = new TableExporter(handler, currentTable);
                
                if(genDrop.isSelected())
                {
                    out.println("DROP TABLE "+currentTable+";");
                    out.println();
                }
                
                out.println(exporter.getSchemaSQL());
                out.println();
            }
            
            out.close();
            
            status.setText("Done");
            status.paintImmediately(0, 0, status.getWidth(), status.getHeight());
            
            JOptionPane.showMessageDialog(this, "Successfully exported "+tables.length+" table(s).");
        }
        catch(Exception e)
        {
            e.printStackTrace();
            
            Component parent = this;
            
            while(parent.getParent() != null) parent = parent.getParent();
            
            ErrorReport.displayError("Export failed on table "+currentTable, e, (Frame)parent);
        }
    }//GEN-LAST:event_exportActionPerformed

    private void browseActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_browseActionPerformed
    {//GEN-HEADEREND:event_browseActionPerformed
        Component parent = this;
        FileDialog dialog;
        
        while(parent.getParent() != null) parent = parent.getParent();
        
        dialog = new FileDialog((Frame)parent, "Select file for schema export...", FileDialog.SAVE);
        dialog.show(true);
        if(dialog.getFile() == null) return;
        filename.setText(dialog.getDirectory()+dialog.getFile());
    }//GEN-LAST:event_browseActionPerformed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelActionPerformed
    {//GEN-HEADEREND:event_cancelActionPerformed
        dispose();
    }//GEN-LAST:event_cancelActionPerformed

    private class TableListLoader implements Runnable
    {
        private String schemaName;
        private String type;
        
        public TableListLoader(String schemaName, String type)
        {
            this.schemaName = schemaName;
            this.type = type;
            
            ThreadPool.run(this);
        }
        
        public void run()
        {
            try
            {
                boolean schema = includeSchema();
                DatabaseMetaData meta = handler.getMetaData();
                ResultSet result = meta.getTables(null, schemaName, "%", new String[]{type});
                AdvancedListModel model = new AdvancedListModel();
                
                Vector temp = new Vector();
                
                //tablesList.setModel(model);
                
                status.setText("Loaded 0 tables...");
                
                while(result.next())
                {
                    if(schema) temp.add(result.getString(2)+"."+result.getString(3));
                    else temp.add(result.getString(3));
                    
                    if(temp.size() > 100) 
                    {
                        //model.add(temp);
                        //temp.clear();
                        
                        status.setText("Loaded "+model.getSize()+" tables...");
                    }
                }
                
                /*if(temp.size() > 0) 
                {
                    model.add(temp);
                    temp.clear();
                }*/
                
                status.setText("Rendering table list...");
                tablesList.setListData(temp);
                status.setText("Ready");
            }
            catch(SQLException e)
            {
                e.printStackTrace();
                
                Component parent = getParent();
            
                while(parent.getParent() != null) parent = parent.getParent();
            
                ErrorReport.displayError("Could not load table liat!", e, (Frame)parent);
            }
        }
        
        private boolean includeSchema() throws SQLException
        {
            try
            {
                String[] list = handler.getDatabaseSchemaList();

                if(list.length < 1) return false;
                if(list.length == 1 && list[0].equals("")) return false;

                return true;
            }
            catch(SQLException e)
            {
                e.printStackTrace();
                return false;
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel title;
    private javax.swing.JScrollPane tablesScroll;
    private javax.swing.JList tablesList;
    private javax.swing.JTextField filename;
    private javax.swing.JButton browse;
    private javax.swing.JLabel filenameLabel;
    private javax.swing.JPanel optionsPanel;
    private javax.swing.JCheckBox genDrop;
    private javax.swing.JLabel status;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton export;
    private javax.swing.JButton cancel;
    // End of variables declaration//GEN-END:variables

}
