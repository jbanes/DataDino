/*
 * DataMigrator.java
 *
 * Created on May 15, 2002, 3:25 PM
 */

package com.dnsalias.java.sqlclient.tools;

import java.awt.*;
import java.sql.*;
import java.util.*;

import javax.swing.*;

import com.dnsalias.java.sqlclient.*;
import com.dnsalias.java.sqlclient.dialog.*;
import com.dnsalias.java.sqlclient.drivers.*;
import com.dnsalias.java.sqlclient.ui.*;
import com.dnsalias.java.sqlclient.util.*;
import com.dnsalias.java.sqlclient.xml.*;

/**
 *
 * @author  jbanes
 */
public class DataMigrator extends JInternalFrame implements Runnable
{
    private SQLClientHandler handler;
    private SQLClientHandler destination = null;
    
    private ProfileParser profileParser = new ProfileParser();
    
    private CardLayout cards;
    private String[] order = new String[]{"step0", "step1", "step2", "step3", "step4", "step5"};
    private Icon[] titles = new Icon[order.length-1];
    private int card = -1;
    
    /** Creates new form DataMigrator */
    public DataMigrator() 
    {
        handler = SQLClientHandler.getCurrentHandler();
        
        initComponents();
        
        cards = (CardLayout)topPanel.getLayout();
        
        initializeTitles();
        
        next();
    }
    
    private void initializeTitles()
    {
        for(int i=0; i<titles.length; i++)
        {
            System.out.println("Loading /images/datamigrator/"+order[i]+".png");
            titles[i] = new ImageIcon(getClass().getResource("/images/datamigrator/"+order[i]+".png"));
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        topPanel = new javax.swing.JPanel();
        step0 = new javax.swing.JPanel();
        step0Label = new javax.swing.JLabel();
        step1 = new javax.swing.JPanel();
        step1Label = new javax.swing.JLabel();
        step1Combo = new javax.swing.JComboBox();
        step2 = new javax.swing.JPanel();
        step2Info = new javax.swing.JLabel();
        step2Hostname = new javax.swing.JTextField();
        step2Port = new javax.swing.JTextField();
        step2Username = new javax.swing.JTextField();
        step2Database = new javax.swing.JTextField();
        step2HostnameLabel = new javax.swing.JLabel();
        step2PortLabel = new javax.swing.JLabel();
        step2UsernameLabel = new javax.swing.JLabel();
        step2PasswordLabel = new javax.swing.JLabel();
        step2DatabaseLabel = new javax.swing.JLabel();
        step2Password = new javax.swing.JPasswordField();
        step2ProfileLabel = new javax.swing.JLabel();
        step2Profile = new javax.swing.JComboBox();
        step3 = new javax.swing.JPanel();
        step3Label = new javax.swing.JLabel();
        step3Combo = new javax.swing.JComboBox();
        step4 = new javax.swing.JPanel();
        step4Label = new javax.swing.JLabel();
        warningBox = new javax.swing.JLabel();
        step5 = new javax.swing.JPanel();
        buttonPanel = new javax.swing.JPanel();
        status = new javax.swing.JLabel();
        previous = new javax.swing.JButton();
        next = new javax.swing.JButton();
        stepImage = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setTitle("Data Migration Wizard");
        topPanel.setLayout(new java.awt.CardLayout());

        topPanel.setFont(new java.awt.Font("Arial", 0, 12));
        step0.setLayout(new java.awt.BorderLayout());

        step0.setFont(new java.awt.Font("Arial", 0, 12));
        step0.setName("step0");
        step0Label.setFont(new java.awt.Font("Arial", 0, 12));
        step0Label.setText("<html>\n<body>\nWelcome to the data migration wizard! This wizard will guide you through the\nprocess of copying data from a table in the current database to a table in another\ndatabase. \n</body>\n</html>");
        step0Label.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(25, 25, 25, 25)));
        step0.add(step0Label, java.awt.BorderLayout.CENTER);

        topPanel.add(step0, "step0");

        step1.setLayout(null);

        step1.setFont(new java.awt.Font("Arial", 0, 12));
        step1.setName("step1");
        step1Label.setFont(new java.awt.Font("Arial", 0, 12));
        step1Label.setText("<html>\n<body>\nFirst we will need you to select the table you wish to copy the data from. Use the drop down\nbox below to make your selection, then press next.\n</body>\n</html>");
        step1.add(step1Label);
        step1Label.setBounds(40, 20, 280, 80);

        step1.add(step1Combo);
        step1Combo.setBounds(60, 110, 250, 25);

        topPanel.add(step1, "step1");

        step2.setLayout(null);

        step2.setFont(new java.awt.Font("Arial", 0, 12));
        step2.setName("step2");
        step2Info.setFont(new java.awt.Font("Arial", 0, 12));
        step2Info.setText("<html>\n<body>\n<center>\nPlease enter the connection information for the destination database. The destination database\nshould contain a table with the same schema as the one you just selected.\n</body>\n</html>\n");
        step2.add(step2Info);
        step2Info.setBounds(10, 0, 360, 60);

        step2.add(step2Hostname);
        step2Hostname.setBounds(170, 60, 180, 20);

        step2.add(step2Port);
        step2Port.setBounds(170, 90, 180, 20);

        step2.add(step2Username);
        step2Username.setBounds(170, 120, 180, 20);

        step2.add(step2Database);
        step2Database.setBounds(170, 180, 180, 20);

        step2HostnameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        step2HostnameLabel.setText("Hostname:");
        step2.add(step2HostnameLabel);
        step2HostnameLabel.setBounds(0, 60, 160, 16);

        step2PortLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        step2PortLabel.setText("Port:");
        step2PortLabel.setMaximumSize(new java.awt.Dimension(61, 17));
        step2PortLabel.setMinimumSize(new java.awt.Dimension(61, 17));
        step2PortLabel.setPreferredSize(new java.awt.Dimension(61, 17));
        step2.add(step2PortLabel);
        step2PortLabel.setBounds(0, 90, 160, 17);

        step2UsernameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        step2UsernameLabel.setText("Username:");
        step2.add(step2UsernameLabel);
        step2UsernameLabel.setBounds(0, 120, 160, 16);

        step2PasswordLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        step2PasswordLabel.setText("Password:");
        step2.add(step2PasswordLabel);
        step2PasswordLabel.setBounds(0, 150, 160, 20);

        step2DatabaseLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        step2DatabaseLabel.setText("Database:");
        step2.add(step2DatabaseLabel);
        step2DatabaseLabel.setBounds(0, 180, 160, 16);

        step2.add(step2Password);
        step2Password.setBounds(170, 150, 180, 20);

        step2ProfileLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        step2ProfileLabel.setText("Profile:");
        step2.add(step2ProfileLabel);
        step2ProfileLabel.setBounds(0, 210, 160, 16);

        step2.add(step2Profile);
        step2Profile.setBounds(170, 210, 180, 25);

        topPanel.add(step2, "step2");

        step3.setLayout(null);

        step3.setName("step1");
        step3Label.setFont(new java.awt.Font("Arial", 0, 12));
        step3Label.setText("<html>\n<body>\nUse the selection box below to find \nthe table in the destination database that you wish to copy the data to. <br>\n<br>\nPlease note that\nif the destination table does not have the same schema, the copy will fail. The copy may also\nfail if certain fields cannot be inserted (e.g. Primary keys that must be auto-generated).\n</body>\n</html>");
        step3.add(step3Label);
        step3Label.setBounds(30, 20, 310, 150);

        step3.add(step3Combo);
        step3Combo.setBounds(60, 180, 250, 25);

        topPanel.add(step3, "step3");

        step4.setLayout(null);

        step4.setName("step0");
        step4Label.setFont(new java.awt.Font("Arial", 0, 12));
        step4Label.setText("<html>\n<body>\nWe are now ready to transfer the data to the new table. Depending on the size of the data, \nthis could take anywhere from a few minutes to a few hours.\n</body>\n</html>");
        step4Label.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(25, 25, 25, 25)));
        step4.add(step4Label);
        step4Label.setBounds(20, 30, 350, 90);

        warningBox.setForeground(java.awt.Color.red);
        step4.add(warningBox);
        warningBox.setBounds(40, 120, 290, 90);

        topPanel.add(step4, "step4");

        step5.setLayout(null);

        step5.setName("step0");
        topPanel.add(step5, "step5");

        getContentPane().add(topPanel, java.awt.BorderLayout.CENTER);

        buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        status.setPreferredSize(new java.awt.Dimension(175, 20));
        buttonPanel.add(status);

        previous.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/navigation/Back16.gif")));
        previous.setText("Previous");
        previous.setEnabled(false);
        previous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousActionPerformed(evt);
            }
        });

        buttonPanel.add(previous);

        next.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/navigation/Forward16.gif")));
        next.setText("Next");
        next.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextActionPerformed(evt);
            }
        });

        buttonPanel.add(next);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        stepImage.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        stepImage.setBackground(java.awt.Color.black);
        stepImage.setForeground(java.awt.Color.white);
        titleLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/datamigrator/step0.png")));
        stepImage.add(titleLabel);

        getContentPane().add(stepImage, java.awt.BorderLayout.NORTH);

        setBounds(25, 30, 400, 330);
    }//GEN-END:initComponents

    private void previousActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_previousActionPerformed
    {//GEN-HEADEREND:event_previousActionPerformed
        previous();
    }//GEN-LAST:event_previousActionPerformed

    private void nextActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_nextActionPerformed
    {//GEN-HEADEREND:event_nextActionPerformed
        next();
    }//GEN-LAST:event_nextActionPerformed

    private void activateStep1()
    {
        new TableListLoader(null, step1Combo, handler);
    }
    
    private void activateStep2()
    {
        Profile[] profiles = profileParser.getProfiles();

        step2Profile.removeAllItems();

        for(int i=0; i<profiles.length; i++)
        {
            step2Profile.addItem(profiles[i].name);
        }
    }
    
    private void activateStep3()
    {
        ThreadPool.run(this);
    }
    
    
    private void activateStep4()
    {
        boolean success = true;
            
        try
        {
            DatabaseMetaData sourceMeta = handler.getMetaData();
            DatabaseMetaData destMeta = destination.getMetaData();

            ResultSet rssource;
            ResultSet rsdest;

            String sourceTable = step1Combo.getSelectedItem().toString();
            String destTable = step3Combo.getSelectedItem().toString();
            
            boolean sourceNext = false;
            boolean destNext = false;

            if(sourceTable.indexOf(".") > 0) rssource = sourceMeta.getColumns(null, sourceTable.substring(0, sourceTable.indexOf(".")), sourceTable.substring(sourceTable.indexOf(".")+1), null);
            else rssource = sourceMeta.getColumns(null, null, sourceTable, null);

            if(destTable.indexOf(".") > 0) rsdest = destMeta.getColumns(null, destTable.substring(0, destTable.indexOf(".")), destTable.substring(destTable.indexOf(".")+1), null);
            else rsdest = destMeta.getColumns(null, null, destTable, null);
            
            sourceNext = rssource.next();
            destNext = rsdest.next();
            
            while(sourceNext && destNext)
            {
                if(rssource.getShort(5) != rsdest.getShort(5)) 
                {
                    System.out.println("Mismatch on column: ");
                    System.out.println(rssource.getShort(5)+" != "+rsdest.getShort(5));
                    System.out.println("["+ClassTranslator.translateSQLType(rssource.getShort(5))+"] != ["+ClassTranslator.translateSQLType(rsdest.getShort(5))+"]");
                    success = false;
                }
                
                sourceNext = rssource.next();
                destNext = rsdest.next();
            }
            
            if(sourceNext != destNext) 
            {
                System.out.println("Totals don't match up!");
                System.out.println("source: "+sourceNext);
                System.out.println("dest: "+destNext);
                success = false;
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
            success = false;
        }
        
        if(!success) warningBox.setText("<html><body>Warning! The schemas for these two tables"
                        + " do not appear to match. This does not mean that the operation will"
                        + " fail, only that the possibility exists. If you have verified your"
                        + " schemas, press next to continue. </body>"
                        + "</html>");
        
        next.setText("Begin");
    }
    
    private void activateStep5()
    {
        DataTransfer transfer = new DataTransfer(handler, destination, step1Combo.getSelectedItem().toString(), step3Combo.getSelectedItem().toString());
        
        getParent().add(transfer);
        transfer.setVisible(true);
        transfer.start();
        
        setVisible(false);
        dispose();
    }
    
    private void deactivateStep2()
    {
        try
        {
            destination.closeConnection();
        }
        catch(SQLException e)
        {
            e.printStackTrace();
        }
        
        step3Combo.removeAllItems();
    }
    
    private void deactivateStep3()
    {
        warningBox.setText("");
        
        next.setText("Next");
    }
    
    private void activate()
    {
        if(card == 1) activateStep1();
        if(card == 2) activateStep2();
        if(card == 3) activateStep3();
        if(card == 4) activateStep4();
        if(card == 5) activateStep5();
    }
    
    private void deactivate()
    {
        if(card == 2) deactivateStep2();
        if(card == 3) deactivateStep3();
    }
    
    public void next()
    {
        if(card+1 >= order.length) return;
        
        card++;
        
        if(card+1 >= order.length) next.setEnabled(false);
        else if(card > 0) previous.setEnabled(true);
        
        activate();
        cards.show(topPanel, order[card]);
        if(card < titles.length) titleLabel.setIcon(titles[card]);
    }
    
    public void previous()
    {
        if(card-1 < 0) return;
        
        card--;
        
        if(card-1 < 0) previous.setEnabled(false);
        else next.setEnabled(true);
        
        deactivate();
        cards.show(topPanel, order[card]);
        titleLabel.setIcon(titles[card]);
    }
    
    public void run()
    {
        Component parent = this;
        
        while(parent.getParent() != null) parent = parent.getParent();
        
        next.setEnabled(false);
        previous.setEnabled(false);
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        
        try
        {
            Profile profile = profileParser.getProfile(step2Profile.getSelectedItem().toString());
            String[] tables;
            
            if(DownloadMonitor.download((Frame)parent, profile.loadDriver()))
            {
                destination = new StandardClient(profile);

                profile.host = step2Hostname.getText();
                profile.port = step2Port.getText();
                profile.username = step2Username.getText();
                profile.password = step2Password.getText();
                profile.database = step2Database.getText();

                destination.openConnection();

                //tables = destination.getDatabaseTableList(true);

                //for(int i=0; i<tables.length; i++) step3Combo.addItem(tables[i]);
                
                new TableListLoader(null, step3Combo, destination);

            }
            else
            {
                previous();
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
            
            ErrorReport.displayError(
                "Could not connect to database! Please verify that the<br>"
                + "information you entered is correct for your database,<br>"
                + "and that your username and password are correct.", e, (Frame)parent);
            
            previous();
        }
        finally
        {
            parent.setCursor(Cursor.getDefaultCursor());
            next.setEnabled(true);
            previous.setEnabled(true);
        }
    }    

    private class TableListLoader implements Runnable
    {
        private String schemaName;
        private JComboBox tablesList;
        private SQLClientHandler handler;
        
        public TableListLoader(String schemaName, JComboBox tablesList, SQLClientHandler handler)
        {
            this.schemaName = schemaName;
            this.tablesList = tablesList;
            this.handler = handler;
            
            ThreadPool.run(this);
        }
        
        public void run()
        {
            try
            {
                boolean schema = includeSchema();
                SQLClientHandler handler = this.handler.getConnection();
                DatabaseMetaData meta = handler.getMetaData();
                ResultSet result = meta.getTables(null, schemaName, "%", null);
                AdvancedListModel model = new AdvancedListModel();
                
                Vector temp = new Vector();
                
                //tablesList.setModel(model);
                status.setText("Loading tables...");
                
                while(result.next())
                {
                    if(schema) temp.add(result.getString(2)+"."+result.getString(3));
                    else temp.add(result.getString(3));
                    
                    if(temp.size() > 100) 
                    {
                        //model.add(temp);
                        //temp.clear();
                        status.setText("Loading "+temp.size()+" tables...");
                    }
                }
                
                /*if(temp.size() > 0) 
                {
                    model.add(temp);
                    temp.clear();
                }*/
                
                status.setText("Rendering List...");
                model.add(temp);
                tablesList.setModel(model);
                status.setText("Select a table.");
                
                try{Thread.sleep(5000);} catch(Exception e) {}
                
                status.setText("");
                handler.completeOperation();
            }
            catch(SQLException e)
            {
                e.printStackTrace();
                
                Component parent = getParent();
            
                while(parent.getParent() != null) parent = parent.getParent();
            
                ErrorReport.displayError("Could not load table list!", e, (Frame)parent);
            }
        }
        
        private boolean includeSchema() throws SQLException
        {
            try
            {
                String[] list = handler.getDatabaseSchemaList();

                if(list.length < 1) return false;
                if(list.length == 1 && list[0].equals("")) return false;

                return true;
            }
            catch(SQLException e)
            {
                e.printStackTrace();
                return false;
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel stepImage;
    private javax.swing.JPanel step0;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JPanel topPanel;
    private javax.swing.JButton next;
    private javax.swing.JLabel step3Label;
    private javax.swing.JButton previous;
    private javax.swing.JTextField step2Hostname;
    private javax.swing.JTextField step2Database;
    private javax.swing.JComboBox step2Profile;
    private javax.swing.JPanel step3;
    private javax.swing.JLabel step4Label;
    private javax.swing.JPasswordField step2Password;
    private javax.swing.JTextField step2Port;
    private javax.swing.JLabel step1Label;
    private javax.swing.JPanel step4;
    private javax.swing.JLabel status;
    private javax.swing.JLabel step0Label;
    private javax.swing.JLabel step2DatabaseLabel;
    private javax.swing.JLabel step2HostnameLabel;
    private javax.swing.JPanel step1;
    private javax.swing.JLabel step2ProfileLabel;
    private javax.swing.JLabel step2Info;
    private javax.swing.JLabel step2PasswordLabel;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JLabel step2PortLabel;
    private javax.swing.JPanel step2;
    private javax.swing.JComboBox step3Combo;
    private javax.swing.JTextField step2Username;
    private javax.swing.JLabel step2UsernameLabel;
    private javax.swing.JPanel step5;
    private javax.swing.JLabel warningBox;
    private javax.swing.JComboBox step1Combo;
    // End of variables declaration//GEN-END:variables

}
