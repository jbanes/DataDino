/*
 * AdvancedTableEditor.java
 *
 * Created on May 13, 2002, 4:01 PM
 */

package com.dnsalias.java.sqlclient.dialog;

import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import java.util.*;

import javax.swing.*;
import javax.swing.event.*;
import javax.swing.table.*;

import com.dnsalias.java.sqlclient.*;
import com.dnsalias.java.sqlclient.ui.*;
import com.dnsalias.java.sqlclient.util.*;
import com.dnsalias.java.sqlclient.validation.*;

/**
 *
 * @author  jbanes
 */
public class AdvancedTableEditor extends JInternalFrame implements TableModelListener, ListSelectionListener
{
    private SQLClientHandler handler;
    private Profile profile;
    private DefaultTableModel model;
    
    private ArrayList info = new ArrayList();
    private int selectedRow = 0;
    private boolean autoset = false;
    
    private static final int COLUMN_NAME = 0;
    private static final int DATA_TYPE = 1;
    private static final int NULLABLE = 2;
    private static final int COMMENTS = 3;
    
    private static final String newline = System.getProperty("line.separator");
    
    public AdvancedTableEditor(SQLClientHandler handler) 
    {
        this.handler = handler;
        this.profile = handler.getCurrentProfile();
        
        initComponents();
        
        MultiplexedToolbar tbar = new MultiplexedToolbar();
        Component[] comp = columnsToolbar.getComponents();
        
        for(int i=0; i<comp.length; i++) 
        {
            columnsToolbar.remove(comp[i]);
            
            if(comp[i] instanceof JLabel) tbar.addSeparator();
            else tbar.add(comp[i]);
        }
        
        tbar.getToolbar().revalidate();
        getContentPane().add(tbar.getToolbar(), BorderLayout.NORTH);
        
        remove(columnsToolbar);
        
        String[] choices = handler.getCurrentProfile().getDataTypes();
        JComboBox combo = new JComboBox(choices);
        SettingsPanel generalColumnSettings = new SettingsPanel(generalColumnSettingsSplit);
        SettingsPanel advancedColumnSettings = new SettingsPanel(advancedColumnSettingsSplit);
        
        combo.setEditable(true);
        
        model = (DefaultTableModel) columns.getModel();
        columns.getColumn("Data Type").setCellEditor(new DefaultCellEditor(combo));
        
        scrollGeneralOptions.setViewportView(generalColumnSettings);
        scrollAdvancedOptions.setViewportView(advancedColumnSettings);
        
        generalColumnValues.remove(dataLength);
        dataLength = new LengthEditor();
        generalColumnValues.add(dataLength, 0);
        
        addColumnActionPerformed(null);
        
        columns.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
        model.addTableModelListener(this);
        columns.getSelectionModel().addListSelectionListener(this);
        
        init();
    }

    private void init()
    {
        try
        {
            String[] schemaItems = handler.getDatabaseSchemaList();
        
            if(profile.autonumber.isDisabled()) autoNum.setEnabled(false);
        
            schema.addItem("<default>");
            for(int i=0; i<schemaItems.length; i++) schema.addItem(schemaItems[i]);
        }
        catch(SQLException e)
        {
            e.printStackTrace();
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents()//GEN-BEGIN:initComponents
    {
        scrollColumns = new javax.swing.JScrollPane();
        columns = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        scrollGeneralOptions = new javax.swing.JScrollPane();
        scrollPanel = new javax.swing.JPanel();
        generalColumnSettingsSplit = new javax.swing.JSplitPane();
        generalColumnOptions = new javax.swing.JPanel();
        dataLengthLabel = new javax.swing.JLabel();
        defaultLabel = new javax.swing.JLabel();
        autoNumLabel = new javax.swing.JLabel();
        generalColumnValues = new javax.swing.JPanel();
        dataLength = new javax.swing.JTextField();
        defaultValue = new javax.swing.JTextField();
        autoNum = new javax.swing.JComboBox();
        scrollAdvancedOptions = new javax.swing.JScrollPane();
        advancedScrollPanel = new javax.swing.JPanel();
        advancedColumnSettingsSplit = new javax.swing.JSplitPane();
        jPanel12 = new javax.swing.JPanel();
        columnOptionsLabel = new javax.swing.JLabel();
        fkLabel = new javax.swing.JLabel();
        onupdateLabel = new javax.swing.JLabel();
        ondeleteLabel = new javax.swing.JLabel();
        deferrableLabel = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        columnOptions = new javax.swing.JTextField();
        fk = new javax.swing.JTextField();
        onupdate = new javax.swing.JComboBox();
        ondelete = new javax.swing.JComboBox();
        deferrable = new javax.swing.JComboBox();
        jPanel9 = new javax.swing.JPanel();
        pkLabel = new javax.swing.JLabel();
        pk = new javax.swing.JComboBox();
        tableNameLabel = new javax.swing.JLabel();
        tableName = new javax.swing.JTextField();
        schemaLabel = new javax.swing.JLabel();
        schema = new javax.swing.JComboBox();
        reviewsql = new javax.swing.JCheckBox();
        buttonPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        columnsToolbar = new javax.swing.JToolBar();
        addColumn = new javax.swing.JButton();
        deleteColumn = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Advanced Table Editor");
        columns.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Name", "Data Type", "Nullable", "Comments"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.String.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }
        });
        columns.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        scrollColumns.setViewportView(columns);

        getContentPane().add(scrollColumns, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.BorderLayout(5, 5));

        jPanel1.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5)));
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(275, 175));
        scrollGeneralOptions.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5)));
        scrollPanel.setLayout(new java.awt.BorderLayout());

        generalColumnSettingsSplit.setDividerSize(0);
        generalColumnSettingsSplit.setResizeWeight(0.5);
        generalColumnSettingsSplit.setBorder(null);
        generalColumnOptions.setLayout(new java.awt.GridLayout(0, 1, 3, 3));

        generalColumnOptions.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(3, 3, 3, 3)));
        dataLengthLabel.setText("Data Length");
        dataLengthLabel.setPreferredSize(new java.awt.Dimension(0, 20));
        dataLengthLabel.setOpaque(true);
        generalColumnOptions.add(dataLengthLabel);

        defaultLabel.setText("Default Value");
        defaultLabel.setPreferredSize(new java.awt.Dimension(0, 20));
        defaultLabel.setOpaque(true);
        generalColumnOptions.add(defaultLabel);

        autoNumLabel.setText("Auto Number");
        generalColumnOptions.add(autoNumLabel);

        generalColumnSettingsSplit.setLeftComponent(generalColumnOptions);

        generalColumnValues.setLayout(new java.awt.GridLayout(0, 1, 3, 3));

        generalColumnValues.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(3, 3, 3, 3)));
        dataLength.setToolTipText("The length of the datatype for this column");
        dataLength.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        dataLength.setPreferredSize(new java.awt.Dimension(0, 20));
        generalColumnValues.add(dataLength);

        defaultValue.setPreferredSize(new java.awt.Dimension(0, 20));
        generalColumnValues.add(defaultValue);

        autoNum.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "false", "true" }));
        generalColumnValues.add(autoNum);

        generalColumnSettingsSplit.setRightComponent(generalColumnValues);

        scrollPanel.add(generalColumnSettingsSplit, java.awt.BorderLayout.CENTER);

        scrollGeneralOptions.setViewportView(scrollPanel);

        jTabbedPane1.addTab("General", null, scrollGeneralOptions, "");

        scrollAdvancedOptions.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5)));
        advancedScrollPanel.setLayout(new java.awt.BorderLayout());

        advancedColumnSettingsSplit.setBorder(null);
        advancedColumnSettingsSplit.setDividerSize(0);
        advancedColumnSettingsSplit.setResizeWeight(0.5);
        jPanel12.setLayout(new java.awt.GridLayout(0, 1, 3, 3));

        jPanel12.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(3, 3, 3, 3)));
        columnOptionsLabel.setText("Extra Options");
        columnOptionsLabel.setPreferredSize(new java.awt.Dimension(0, 20));
        columnOptionsLabel.setOpaque(true);
        jPanel12.add(columnOptionsLabel);

        fkLabel.setText("References");
        fkLabel.setPreferredSize(new java.awt.Dimension(0, 20));
        fkLabel.setOpaque(true);
        jPanel12.add(fkLabel);

        onupdateLabel.setText("On Update");
        jPanel12.add(onupdateLabel);

        ondeleteLabel.setText("On Delete");
        jPanel12.add(ondeleteLabel);

        deferrableLabel.setText("Deferrable");
        jPanel12.add(deferrableLabel);

        advancedColumnSettingsSplit.setLeftComponent(jPanel12);

        jPanel13.setLayout(new java.awt.GridLayout(0, 1, 3, 3));

        jPanel13.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(3, 3, 3, 3)));
        columnOptions.setToolTipText("Enter extra options for the column here. For example \"CACHED UNIQUE\"");
        columnOptions.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        columnOptions.setPreferredSize(new java.awt.Dimension(0, 20));
        jPanel13.add(columnOptions);

        fk.setToolTipText("This can be used to list a foreign key for this column.");
        fk.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        fk.setPreferredSize(new java.awt.Dimension(0, 20));
        jPanel13.add(fk);

        onupdate.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "NO ACTION", "RESTRICT", "CASCADE", "SET NULL", "SET DEFAULT" }));
        onupdate.setToolTipText("If a foreign key is specified, this is the action that will be taken on an update");
        jPanel13.add(onupdate);

        ondelete.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "NO ACTION", "RESTRICT", "CASCADE", "SET NULL", "SET DEFAULT" }));
        ondelete.setToolTipText("If a foreign key is specified, this is the action that will be taken on a delete");
        jPanel13.add(ondelete);

        deferrable.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "false", "true" }));
        deferrable.setToolTipText("This specifies whether the foreign key is deferrable");
        jPanel13.add(deferrable);

        advancedColumnSettingsSplit.setRightComponent(jPanel13);

        advancedScrollPanel.add(advancedColumnSettingsSplit, java.awt.BorderLayout.CENTER);

        scrollAdvancedOptions.setViewportView(advancedScrollPanel);

        jTabbedPane1.addTab("Advanced", scrollAdvancedOptions);

        jPanel1.add(jTabbedPane1, java.awt.BorderLayout.WEST);

        jPanel9.setLayout(null);

        pkLabel.setText("Primary Key");
        pkLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jPanel9.add(pkLabel);
        pkLabel.setBounds(-1, 10, 100, 20);

        pk.setToolTipText("<html>\n<body>\nThe primary key for the table. Multi-part keys can<br>\nbe comma separated. For no key, leave this blank.\n</body>\n</html>");
        pk.setEditable(true);
        jPanel9.add(pk);
        pk.setBounds(110, 10, 122, 20);

        tableNameLabel.setText("Table Name");
        tableNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jPanel9.add(tableNameLabel);
        tableNameLabel.setBounds(0, 40, 100, 20);

        jPanel9.add(tableName);
        tableName.setBounds(110, 40, 130, 20);

        schemaLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        schemaLabel.setText("Schema");
        jPanel9.add(schemaLabel);
        schemaLabel.setBounds(1, 70, 100, 20);

        schema.setEditable(true);
        jPanel9.add(schema);
        schema.setBounds(110, 70, 122, 20);

        reviewsql.setText("Review SQL?");
        reviewsql.setToolTipText("<html>\n<body>\nAllows you to review and possibly change<br>\nthe SQL that will be generated.\n</body>\n</html>");
        reviewsql.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        reviewsql.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jPanel9.add(reviewsql);
        reviewsql.setBounds(0, 100, 130, 22);

        jPanel1.add(jPanel9, java.awt.BorderLayout.CENTER);

        buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        okButton.setText("Ok");
        okButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                okButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(okButton);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cancelButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(cancelButton);

        jPanel1.add(buttonPanel, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        addColumn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/New16.gif")));
        addColumn.setToolTipText("Add Column");
        addColumn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                addColumnActionPerformed(evt);
            }
        });

        columnsToolbar.add(addColumn);

        deleteColumn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Delete16.gif")));
        deleteColumn.setToolTipText("Delete Column");
        deleteColumn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                deleteColumnActionPerformed(evt);
            }
        });

        columnsToolbar.add(deleteColumn);

        getContentPane().add(columnsToolbar, java.awt.BorderLayout.NORTH);

        setBounds(0, 0, 550, 400);
    }//GEN-END:initComponents

    private boolean validateTable()
    {
        if(tableName.getText().length() < 1) 
        {
            JOptionPane.showMessageDialog(this, "You must specify a name for the table!", "Error", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        
        return true;
    }
    
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_okButtonActionPerformed
    {//GEN-HEADEREND:event_okButtonActionPerformed
        SQLClientHandler handler = this.handler.getConnection();
        String sql = "CREATE TABLE ";
        String tableName = this.tableName.getText();
        ColumnInfo info;
        
        try
        {
            valueChanged(null);
            if(!validateTable()) return;

            if(!schema.getSelectedItem().toString().equals("<default>") && schema.getSelectedItem().toString().length() > 0)
            {
                tableName = schema.getSelectedItem()+"."+tableName;
            }

            if(tableName.indexOf(' ') >= 0) tableName = SQLNormalizer.tableName(tableName, handler);

            sql += tableName+" ("+newline;

            for(int i=0, row=0; i<columns.getRowCount(); i++)
            {
                info = (ColumnInfo)this.info.get(i);

                if(model.getValueAt(i, COLUMN_NAME).toString().trim().length() < 1) continue;

                if(row > 0) sql += ", "+newline;

                sql += "    "+SQLNormalizer.columnName(model.getValueAt(i, COLUMN_NAME).toString(), handler);

                if(info.autonumber.equals("true") && profile.autonumber.getDataType() != null)
                {
                    sql += " "+profile.autonumber.getDataType();
                }
                else
                {
                    sql += " "+model.getValueAt(i, DATA_TYPE).toString();

                    if(info.length.trim().length() > 0)
                    {
                        sql += "("+info.length+")";
                    }
                }

                //DEFAULT clause
                if(info.defaultValue.trim().length() > 0) sql += " DEFAULT "+addDelimiters(info.defaultValue);
                //NOT NULL clause
                if(!((Boolean)model.getValueAt(i, NULLABLE)).booleanValue()) sql += " NOT NULL";
                //autonumber clause
                if(info.isAutoNumber() && profile.autonumber.getColumnSQL() != null) sql += " "+profile.autonumber.getColumnSQL();
                //manual options
                if(info.columnOptions.length() > 0) sql += " "+info.columnOptions;

                row++;
            }

            if(pk.getSelectedItem() != null && pk.getSelectedItem().toString().trim().length() > 0) 
                sql += ","+newline+"    CONSTRAINT "+SQLNormalizer.tableName(this.tableName.getText()+"_PK", handler)+" PRIMARY KEY ("+normalizeKey(handler, pk.getSelectedItem().toString())+")";

            for(int i=0; i<columns.getRowCount(); i++)
            {
                info = (ColumnInfo)this.info.get(i);

                if(info.foreignkey.length() < 1) continue;

                sql += ", "+newline;

                sql += "    CONSTRAINT "+SQLNormalizer.tableName(model.getValueAt(i, COLUMN_NAME).toString()+"_FK", handler)+" FOREIGN KEY (";
                sql += SQLNormalizer.columnName(model.getValueAt(i, COLUMN_NAME).toString(), handler);
                sql += ") REFERENCES "+info.getForeignKeyTable()+" ("+SQLNormalizer.columnName(info.getForeignKeyColumn(), handler)+")"+newline;
                sql += "        ON UPDATE "+info.onupdate+newline;
                sql += "        ON DELETE "+info.ondelete;

                if(info.isDeferrable()) sql += newline+"        DEFERRABLE";
            }

            sql += newline+")";

            if(reviewsql.isSelected())
            {
                ReviewText review;
                Component parent = this;

                while(parent.getParent() != null) parent = parent.getParent();

                review = new ReviewText((Frame)parent, sql);
                review.show(true);

                if(!review.accepted()) return;

                sql = review.getText();
            }

            System.out.println(sql);

            try
            {
                handler.executeSQLChange(sql);
            }
            catch(Exception e)
            {
                e.printStackTrace();

                Container parent = this;

                while(parent.getParent() != null) parent = parent.getParent();
                ErrorReport.displayError("An error occurred while creating the table. Check<br>your settings and try again.",e, (Frame)parent);

                return;
            }

            try
            {
                for(int i=0; i<columns.getRowCount(); i++)
                {
                    if(model.getValueAt(i, COMMENTS).toString().trim().length() > 0 && model.getValueAt(i, COLUMN_NAME).toString().trim().length() > 0)
                    {
                        sql = "COMMENT ON COLUMN "+tableName+"."+SQLNormalizer.columnName(model.getValueAt(i, COLUMN_NAME).toString(), handler)+" IS '"+model.getValueAt(i, COMMENTS)+"'";

                        System.out.println(sql);
                        handler.executeSQLChange(sql);
                    }
                }
            }
            catch(Exception e)
            {
                e.printStackTrace();

                Container parent = this;

                while(parent.getParent() != null) parent = parent.getParent();
                ErrorReport.displayError("Could not save column comments. Your database <br>may not support this feature.",e, (Frame)parent);
            }

            dispose();
            handler.completeOperation();
        }
        catch(SQLException e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_okButtonActionPerformed

    private String normalizeKey(SQLClientHandler handler, String key) throws SQLException
    {
        String sql = "";
        StringTokenizer tokens = new StringTokenizer(key, ",");
        
        while(tokens.hasMoreTokens())
        {
            if(sql.length() > 0) sql += ", ";
            sql += SQLNormalizer.columnName(tokens.nextToken().trim(), handler);
        }
        
        return sql;
    }
    
    private void deleteColumnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteColumnActionPerformed
    {//GEN-HEADEREND:event_deleteColumnActionPerformed
        ListSelectionModel selectModel = columns.getSelectionModel();
        int length = model.getRowCount();
        
        for(int i=0; i<length; i++)
        {
            if(selectModel.isSelectedIndex(i))
            {
                model.removeRow(i);
                info.remove(i);
                i--;
            }
        }
    }//GEN-LAST:event_deleteColumnActionPerformed

    private void addColumnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addColumnActionPerformed
    {//GEN-HEADEREND:event_addColumnActionPerformed
        Object[] rowData = {"", "VARCHAR", false, ""};
        
        info.add(new ColumnInfo());
        model.addRow(rowData);
    }//GEN-LAST:event_addColumnActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelButtonActionPerformed
    {//GEN-HEADEREND:event_cancelButtonActionPerformed
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private String addDelimiters(String value)
    {
        boolean dot = false;
        boolean numbers = false;
        boolean delimiter = false;
        boolean multidot = false;
        boolean letters = false;
        boolean space = false;
        boolean openParen = false;
        boolean closeParen = false;
        boolean symbols = false;
        
        char character;
        
        for(int i=0; i<value.length(); i++)
        {
            character = value.charAt(i);
            
            if(character == '.')
            {
                if(dot) multidot = true;
                else dot = true;
            }
            else if(character == '(') openParen = true;
            else if(character == ')') closeParen = true;
            else if(Character.isDigit(character)) numbers = true;
            else if(Character.isLetter(character)) letters = true;
            else if(Character.isSpace(character)) space = true;
            else if(character == '\'') delimiter = true;
            else symbols = true;
        }
        
        if(openParen && closeParen) return value;
        if(delimiter || value.equals("true") || value.equals("false")) return value;
        if(letters || space || multidot || symbols) return "'"+value+"'";
        if(numbers) return value;
        
        return "'"+value+"'";
    }
    
    public void tableChanged(TableModelEvent evt)
    {
        int rowCount = model.getRowCount();
        int column = COLUMN_NAME; 
        boolean set = false;
        
        Object selected = pk.getSelectedItem();
        
        if(column != COLUMN_NAME) return;
        
        pk.removeAllItems();
        
        for(int i=0; i<rowCount; i++)
        {
            Object object = model.getValueAt(i, column);
            
            if(object != null && object.toString().trim().length() > 0) pk.addItem(object);
            
            if(selected != null && object != null && selected.equals(object))
            {
                pk.setSelectedItem(selected);
                set = true;
                autoset = true;
            }
        }
        
        if(selected != null && !set && (selected.toString().indexOf(',') > 0 || selected.toString().trim().equals("")))
        {
            pk.setSelectedItem(selected);
        }
        else if(pk.getItemCount() > 0 && !set) 
        {
            pk.setSelectedIndex(0);
            autoset = true;
        }
        else if(!set) 
        {
            pk.setSelectedItem(null);
        }
    }    
    
    public void valueChanged(ListSelectionEvent listSelectionEvent)
    {
        if(selectedRow >= 0 && selectedRow < this.info.size())
        {
            ColumnInfo info = (ColumnInfo)this.info.get(selectedRow);
        
            info.length = dataLength.getText();
            info.defaultValue = defaultValue.getText();
            info.autonumber = autoNum.getSelectedItem().toString();
            info.columnOptions = columnOptions.getText();
            info.foreignkey = fk.getText();
            info.onupdate = onupdate.getSelectedItem().toString();
            info.ondelete = ondelete.getSelectedItem().toString();
            info.deferrable = deferrable.getSelectedItem().toString();
        }
        
        selectedRow = columns.getSelectedRow();
        
        if(selectedRow >= 0)
        {
            ColumnInfo info = (ColumnInfo)this.info.get(selectedRow);
        
            dataLength.setText(info.length);
            defaultValue.setText(info.defaultValue);
            autoNum.setSelectedItem(info.autonumber);
            columnOptions.setText(info.columnOptions);
            fk.setText(info.foreignkey);
            onupdate.setSelectedItem(info.onupdate);
            ondelete.setSelectedItem(info.ondelete);
            deferrable.setSelectedItem(info.deferrable);
        }
    }
    
    private class ColumnInfo
    {
        String length = "";
        String defaultValue = "";
        String autonumber = "false";
        String columnOptions = "";
        String foreignkey = "";
        String onupdate = "NO ACTION";
        String ondelete = "NO ACTION";
        String deferrable = "false";
        
        public String getForeignKeyTable()
        {
            if(foreignkey.indexOf('.') < 0) return "";
            
            return foreignkey.substring(0, foreignkey.lastIndexOf('.'));
        }
        
        public String getForeignKeyColumn()
        {
            if(foreignkey.indexOf('.') < 0) return foreignkey;
            
            return foreignkey.substring(foreignkey.lastIndexOf('.')+1);
        }
        
        public boolean isAutoNumber()
        {
            return autonumber.equals("true");
        }
        
        public boolean isDeferrable()
        {
            return deferrable.equals("true");
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addColumn;
    private javax.swing.JSplitPane advancedColumnSettingsSplit;
    private javax.swing.JPanel advancedScrollPanel;
    private javax.swing.JComboBox autoNum;
    private javax.swing.JLabel autoNumLabel;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField columnOptions;
    private javax.swing.JLabel columnOptionsLabel;
    private javax.swing.JTable columns;
    private javax.swing.JToolBar columnsToolbar;
    private javax.swing.JTextField dataLength;
    private javax.swing.JLabel dataLengthLabel;
    private javax.swing.JLabel defaultLabel;
    private javax.swing.JTextField defaultValue;
    private javax.swing.JComboBox deferrable;
    private javax.swing.JLabel deferrableLabel;
    private javax.swing.JButton deleteColumn;
    private javax.swing.JTextField fk;
    private javax.swing.JLabel fkLabel;
    private javax.swing.JPanel generalColumnOptions;
    private javax.swing.JSplitPane generalColumnSettingsSplit;
    private javax.swing.JPanel generalColumnValues;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton okButton;
    private javax.swing.JComboBox ondelete;
    private javax.swing.JLabel ondeleteLabel;
    private javax.swing.JComboBox onupdate;
    private javax.swing.JLabel onupdateLabel;
    private javax.swing.JComboBox pk;
    private javax.swing.JLabel pkLabel;
    private javax.swing.JCheckBox reviewsql;
    private javax.swing.JComboBox schema;
    private javax.swing.JLabel schemaLabel;
    private javax.swing.JScrollPane scrollAdvancedOptions;
    private javax.swing.JScrollPane scrollColumns;
    private javax.swing.JScrollPane scrollGeneralOptions;
    private javax.swing.JPanel scrollPanel;
    private javax.swing.JTextField tableName;
    private javax.swing.JLabel tableNameLabel;
    // End of variables declaration//GEN-END:variables

}
