/*
 * FilterDialog.java
 *
 * Created on June 27, 2001, 7:42 PM
 */

package com.dnsalias.java.sqlclient.dialog;

import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import java.util.*;
import javax.swing.*;

import com.dnsalias.java.sqlclient.*;
import com.dnsalias.java.sqlclient.gdbi.*;
import com.dnsalias.java.sqlclient.util.*;

/**
 *
 * @author  jbanes
 */
public class FilterDialog extends JDialog 
{
    private static FilterDialog instance = null;
    private static String filter = "";
    
    private DBObject dbo;
    private SQLClientHandler handler;
    
    private String[] sortOrder;
    
    /** Creates new form FilterDialog */
    private FilterDialog(DBObject dbo, SQLClientHandler handler, Frame parent, boolean modal) 
    {
        super(parent, modal);
        
        this.dbo = dbo;
        this.handler = handler;
        
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents()//GEN-BEGIN:initComponents
    {
        tabs = new javax.swing.JTabbedPane();
        sortPanel = new javax.swing.JPanel();
        sortByScroll = new javax.swing.JScrollPane();
        sortBy = new javax.swing.JList();
        availableColumnsScroll = new javax.swing.JScrollPane();
        availableColumns = new javax.swing.JList();
        sortControls = new javax.swing.JPanel();
        ascend = new javax.swing.JButton();
        descend = new javax.swing.JButton();
        remove = new javax.swing.JButton();
        removeAll = new javax.swing.JButton();
        filterPanel = new javax.swing.JPanel();
        toolbar = new javax.swing.JToolBar();
        add = new javax.swing.JButton();
        and = new javax.swing.JButton();
        or = new javax.swing.JButton();
        spacer = new javax.swing.JLabel();
        clear = new javax.swing.JButton();
        changeFilterPanel = new javax.swing.JPanel();
        columnsCombo = new javax.swing.JComboBox();
        optionsCombo = new javax.swing.JComboBox();
        valueText = new javax.swing.JTextField();
        filterScroll = new javax.swing.JScrollPane();
        filterText = new javax.swing.JTextPane();
        okcancel = new javax.swing.JPanel();
        ok = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        
        setTitle("Filter/Sort");
        setName("");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                closeDialog(evt);
            }
        });
        
        sortPanel.setLayout(new java.awt.BorderLayout());
        
        sortBy.setFixedCellWidth(130);
        sortByScroll.setViewportView(sortBy);
        
        sortPanel.add(sortByScroll, java.awt.BorderLayout.WEST);
        
        availableColumnsScroll.setPreferredSize(new java.awt.Dimension(130, 3));
        availableColumns.setFixedCellWidth(115);
        availableColumnsScroll.setViewportView(availableColumns);
        
        sortPanel.add(availableColumnsScroll, java.awt.BorderLayout.EAST);
        
        sortControls.setLayout(null);
        
        sortControls.setPreferredSize(new java.awt.Dimension(135, 207));
        ascend.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/navigation/Back16.gif")));
        ascend.setLabel("Ascend");
        ascend.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        ascend.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        ascend.setMargin(new java.awt.Insets(2, 4, 2, 4));
        ascend.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ascendActionPerformed(evt);
            }
        });
        
        sortControls.add(ascend);
        ascend.setBounds(10, 20, 100, 27);
        
        descend.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/navigation/Back16.gif")));
        descend.setLabel("Descend");
        descend.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        descend.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        descend.setMargin(new java.awt.Insets(2, 4, 2, 4));
        descend.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                descendActionPerformed(evt);
            }
        });
        
        sortControls.add(descend);
        descend.setBounds(10, 60, 100, 27);
        
        remove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/navigation/Forward16.gif")));
        remove.setText("Remove");
        remove.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        remove.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        remove.setMargin(new java.awt.Insets(2, 4, 2, 4));
        remove.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                removeActionPerformed(evt);
            }
        });
        
        sortControls.add(remove);
        remove.setBounds(10, 100, 100, 27);
        
        removeAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/navigation/Forward16.gif")));
        removeAll.setText("Remove All");
        removeAll.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        removeAll.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        removeAll.setMargin(new java.awt.Insets(2, 4, 2, 4));
        removeAll.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                removeAllActionPerformed(evt);
            }
        });
        
        sortControls.add(removeAll);
        removeAll.setBounds(10, 140, 100, 27);
        
        sortPanel.add(sortControls, java.awt.BorderLayout.CENTER);
        
        tabs.addTab("Sort", sortPanel);
        
        filterPanel.setLayout(new java.awt.BorderLayout());
        
        toolbar.setFloatable(false);
        add.setText("Add to Filter");
        add.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                addActionPerformed(evt);
            }
        });
        
        toolbar.add(add);
        
        and.setText("And to Filter");
        and.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                andActionPerformed(evt);
            }
        });
        
        toolbar.add(and);
        
        or.setText("Or to Filter");
        or.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                orActionPerformed(evt);
            }
        });
        
        toolbar.add(or);
        
        spacer.setText("   ");
        toolbar.add(spacer);
        
        clear.setText("Clear Filter");
        clear.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clearActionPerformed(evt);
            }
        });
        
        toolbar.add(clear);
        
        filterPanel.add(toolbar, java.awt.BorderLayout.NORTH);
        
        changeFilterPanel.setLayout(null);
        
        changeFilterPanel.setPreferredSize(new java.awt.Dimension(381, 26));
        changeFilterPanel.setMinimumSize(new java.awt.Dimension(245, 26));
        changeFilterPanel.setMaximumSize(new java.awt.Dimension(2147483647, 26));
        columnsCombo.setEditable(true);
        columnsCombo.setPreferredSize(new java.awt.Dimension(125, 21));
        changeFilterPanel.add(columnsCombo);
        columnsCombo.setBounds(0, 0, 130, 20);
        
        optionsCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[]
        { "=", "<", "<=", ">", ">=", "<>", "LIKE", "BETWEEN" }));
        optionsCombo.setEditable(true);
        optionsCombo.setPreferredSize(new java.awt.Dimension(124, 21));
        changeFilterPanel.add(optionsCombo);
        optionsCombo.setBounds(140, 0, 90, 20);
        
        valueText.setMaximumSize(new java.awt.Dimension(2147483647, 21));
        changeFilterPanel.add(valueText);
        valueText.setBounds(240, 0, 120, 20);
        
        filterScroll.setViewportView(filterText);
        
        changeFilterPanel.add(filterScroll);
        filterScroll.setBounds(0, 30, 390, 150);
        
        filterPanel.add(changeFilterPanel, java.awt.BorderLayout.CENTER);
        
        tabs.addTab("Filter", filterPanel);
        
        getContentPane().add(tabs, java.awt.BorderLayout.CENTER);
        
        okcancel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));
        
        ok.setText("Ok");
        ok.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                okActionPerformed(evt);
            }
        });
        
        okcancel.add(ok);
        
        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cancelActionPerformed(evt);
            }
        });
        
        okcancel.add(cancel);
        
        getContentPane().add(okcancel, java.awt.BorderLayout.SOUTH);
        
        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setSize(new java.awt.Dimension(400, 300));
        setLocation((screenSize.width-400)/2,(screenSize.height-300)/2);
    }//GEN-END:initComponents

    private void clearActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clearActionPerformed
    {//GEN-HEADEREND:event_clearActionPerformed
        filterText.setText("");
    }//GEN-LAST:event_clearActionPerformed

    private void orActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_orActionPerformed
    {//GEN-HEADEREND:event_orActionPerformed
        try
        {
            filterText.setText(filterText.getText()+" OR "+SQLNormalizer.columnName(columnsCombo.getSelectedItem().toString(), handler)+" "+
                optionsCombo.getSelectedItem()+" "+SQLNormalizer.string(valueText.getText()));
        }
        catch(SQLException e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_orActionPerformed

    private void andActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_andActionPerformed
    {//GEN-HEADEREND:event_andActionPerformed
        try
        {
            filterText.setText(filterText.getText()+" AND "+SQLNormalizer.columnName(columnsCombo.getSelectedItem().toString(), handler)+" "+
                optionsCombo.getSelectedItem()+" "+SQLNormalizer.string(valueText.getText()));
        }
        catch(SQLException e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_andActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addActionPerformed
    {//GEN-HEADEREND:event_addActionPerformed
        try
        {
            if(!filterText.getText().trim().equals("")) filterText.setText(filterText.getText()+"\nAND ");

            filterText.setText(filterText.getText()+SQLNormalizer.columnName(columnsCombo.getSelectedItem().toString(), handler)+" "+
                optionsCombo.getSelectedItem()+" "+SQLNormalizer.string(valueText.getText()));
        }
        catch(SQLException e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_addActionPerformed

    private void removeAllActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_removeAllActionPerformed
    {//GEN-HEADEREND:event_removeAllActionPerformed
        // Add your handling code here:
        
        ListModel model = sortBy.getModel();
        ListModel model2 = availableColumns.getModel();
        Vector data = new Vector();
        
        for(int i=0; i<model2.getSize(); i++) data.add(model2.getElementAt(i));
        for(int i=0; i<model.getSize(); i++) data.add(model.getElementAt(i));
        
        availableColumns.setListData(data);
        
        sortBy.setListData(new Object[0]);
    }//GEN-LAST:event_removeAllActionPerformed

    private void removeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_removeActionPerformed
    {//GEN-HEADEREND:event_removeActionPerformed
        // Add your handling code here:
        
        Object[] selected = sortBy.getSelectedValues();
        ListModel model = availableColumns.getModel();
        Vector data = new Vector();
        Vector data2 = new Vector();
        
        if(selected == null || selected.length < 1) return;
        
        for(int i=0; i<model.getSize(); i++) data.add(model.getElementAt(i));
        for(int i=0; i<selected.length; i++) data.add(selected[i]);
        
        availableColumns.setListData(data);
        
        for(int start=sortBy.getSelectedIndex(), end=selected.length; end<sortOrder.length; start++, end++)
        {
            sortOrder[start] = sortOrder[end];
        }
        
        model = sortBy.getModel();
        
        for(int i=0; i<model.getSize(); i++) 
        {
            if(!data.contains(model.getElementAt(i))) data2.add(model.getElementAt(i));
        }
        
        sortBy.setListData(data2);
    }//GEN-LAST:event_removeActionPerformed

    private void descendActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_descendActionPerformed
    {//GEN-HEADEREND:event_descendActionPerformed
        // Add your handling code here:
        
        Object[] selected = availableColumns.getSelectedValues();
        ListModel model = sortBy.getModel();
        Vector data = new Vector();
        Vector data2 = new Vector();
        
        for(int i=0; i<model.getSize(); i++) data.add(model.getElementAt(i));
        
        for(int i=0; i<selected.length; i++)
        {
            sortOrder[model.getSize()] = "DESC";
            data.add(selected[i]);
        }
        
        sortBy.setListData(data);
        
        model = availableColumns.getModel();
        
        for(int i=0; i<model.getSize(); i++) 
        {
            if(!data.contains(model.getElementAt(i))) data2.add(model.getElementAt(i));
        }
        
        availableColumns.setListData(data2);
    }//GEN-LAST:event_descendActionPerformed

    private void ascendActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ascendActionPerformed
    {//GEN-HEADEREND:event_ascendActionPerformed
        // Add your handling code here:
                            
        Object[] selected = availableColumns.getSelectedValues();
        ListModel model = sortBy.getModel();
        Vector data = new Vector();
        Vector data2 = new Vector();
        
        for(int i=0; i<model.getSize(); i++) data.add(model.getElementAt(i));
        
        for(int i=0; i<selected.length; i++)
        {
            sortOrder[model.getSize()] = "ASC";
            data.add(selected[i]);
        }
        
        sortBy.setListData(data);
        
        model = availableColumns.getModel();
        
        for(int i=0; i<model.getSize(); i++) 
        {
            if(!data.contains(model.getElementAt(i))) data2.add(model.getElementAt(i));
        }
        
        availableColumns.setListData(data2);
    }//GEN-LAST:event_ascendActionPerformed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelActionPerformed
    {//GEN-HEADEREND:event_cancelActionPerformed
        // Add your handling code here:
        setVisible(false);
    }//GEN-LAST:event_cancelActionPerformed

    private void okActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_okActionPerformed
    {//GEN-HEADEREND:event_okActionPerformed
        // Add your handling code here:
        try
        {
            filter = "";
            if(!instance.filterText.getText().trim().equals("")) filter += " where "+instance.filterText.getText();

            if(instance.sortBy.getModel().getSize() > 0) 
            {
                filter += " ORDER BY ";

                ListModel model = instance.sortBy.getModel();

                for(int i=0; i<model.getSize(); i++)
                {
                    if(i > 0) filter += ", ";
                    filter += SQLNormalizer.columnName(model.getElementAt(i).toString(), handler)+" "+instance.sortOrder[i];
                }
            }  

            setVisible(false);
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_okActionPerformed

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        filter = "";
        setVisible(false);
    }//GEN-LAST:event_closeDialog

    private void parseFilter()
    {
        try
        {
            String part1 = getWhere();
            String[] data = getOrder();

            filterText.setText(part1);

            for(int i=0; i<data.length; i++)
            {
                String[] tokens = getTokens(data[i]);
                String name = "";
                ListModel model = availableColumns.getModel();

                sortOrder[i] = tokens[tokens.length-1];
                
                for(int index=0; index<tokens.length-1; index++)
                {
                    if(index > 0) name += " ";
                    name += tokens[index];
                }

                name = SQLNormalizer.stripIdentifierQuotes(name.trim(), handler);

                for(int index=0; index<model.getSize(); index++)
                {
                    System.out.println(model.getElementAt(index)+" - "+name);
                    if(model.getElementAt(index).equals(name)) availableColumns.setSelectedIndex(index);
                }

                if(sortOrder[i].equals("ASC")) ascendActionPerformed(new ActionEvent(ascend, 0, "Ascend"));
                descendActionPerformed(new ActionEvent(descend, 0, "Descend"));
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }
    
    private String[] getTokens(String data)
    {
        StringTokenizer tokens = new StringTokenizer(data);
        String[] ret = new String[tokens.countTokens()];
        
        for(int i=0; i<ret.length; i++) ret[i] = tokens.nextToken();
        
        return ret;
    }
    
    private String getWhere()
    {
        int start = 0;
        int split = filter.indexOf("ORDER BY");
        
        if(filter.startsWith(" where ")) start = 7;
        if(split < 0) split = filter.length();
        
        return filter.substring(start, split);
    }
    
    public String[] getOrder()
    {
        int split = filter.indexOf("ORDER BY");
        
        if(split < 0) return new String[0];
        
        StringTokenizer tokens = new StringTokenizer(filter.substring(split+8), ",");
        int total = tokens.countTokens();
        String[] data = new String[total];
        
        for(int i=0; i<total; i++) data[i] = tokens.nextToken();
        
        return data;
    }
    
    public synchronized static String getFilter(DBObject dbo, String filter, SQLClientHandler handler, Frame parent)
    {
        if(instance == null) instance = new FilterDialog(dbo, handler, parent, true);
        
        try
        {
            String[] columnList = handler.getDatabaseColumnList(dbo);
   
            instance.handler = handler;
            instance.sortOrder = new String[columnList.length];
            instance.availableColumns.setListData(columnList);
            instance.columnsCombo.setModel(new DefaultComboBoxModel(columnList));
            
            FilterDialog.filter = filter;
            instance.sortBy.setListData(new String[0]);
            instance.parseFilter();
            
            instance.show();
        }
        catch(SQLException e)
        {
            e.printStackTrace();
            
            ErrorReport.displayError(e, parent);
        }
        
        return FilterDialog.filter;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JPanel sortPanel;
    private javax.swing.JScrollPane sortByScroll;
    private javax.swing.JList sortBy;
    private javax.swing.JScrollPane availableColumnsScroll;
    private javax.swing.JList availableColumns;
    private javax.swing.JPanel sortControls;
    private javax.swing.JButton ascend;
    private javax.swing.JButton descend;
    private javax.swing.JButton remove;
    private javax.swing.JButton removeAll;
    private javax.swing.JPanel filterPanel;
    private javax.swing.JToolBar toolbar;
    private javax.swing.JButton add;
    private javax.swing.JButton and;
    private javax.swing.JButton or;
    private javax.swing.JLabel spacer;
    private javax.swing.JButton clear;
    private javax.swing.JPanel changeFilterPanel;
    private javax.swing.JComboBox columnsCombo;
    private javax.swing.JComboBox optionsCombo;
    private javax.swing.JTextField valueText;
    private javax.swing.JScrollPane filterScroll;
    private javax.swing.JTextPane filterText;
    private javax.swing.JPanel okcancel;
    private javax.swing.JButton ok;
    private javax.swing.JButton cancel;
    // End of variables declaration//GEN-END:variables

}
