/*
 * SQLEditor.java
 *
 */

package com.dnsalias.java.sqlclient;

import java.awt.*;
import java.io.*;
import java.sql.*;
import java.util.*;
import javax.swing.*;
import javax.swing.table.*;

import com.dnsalias.java.sqlclient.dialog.*;
import com.dnsalias.java.sqlclient.ui.*;

/**
 *
 * @author  jbanes
 */
public class SQLEditor extends JInternalFrame 
{
    //SQLFileChooser chooser;
    SQLClientHandler handler = SQLClientHandler.getCurrentHandler();
    Icon close = new ImageIcon(getClass().getResource("/images/close.png"));

    /** Creates new form SQLEditor */
    public SQLEditor() 
    {
        initComponents();
        //chooser = new SQLFileChooser(new JFrame(), true);
        
        closeButton.setVisible(false);
        //editor.setDocument(new SQLDocument());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents()//GEN-BEGIN:initComponents
    {
        toolbar = new javax.swing.JToolBar();
        execute = new javax.swing.JButton();
        open = new javax.swing.JButton();
        save = new javax.swing.JButton();
        split = new javax.swing.JSplitPane();
        scrollEditor = new javax.swing.JScrollPane();
        editor = new javax.swing.JTextPane();
        jPanel1 = new javax.swing.JPanel();
        tabbedResults = new javax.swing.JTabbedPane();
        closeButton = new javax.swing.JPanel();
        closeIcon = new javax.swing.JButton();
        
        setMaximizable(true);
        setTitle("SQL Editor");
        setIconifiable(true);
        setResizable(true);
        setClosable(true);
        toolbar.setMargin(new java.awt.Insets(1, 1, 1, 1));
        execute.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/media/Play16.gif")));
        execute.setToolTipText("Execute");
        execute.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                executeActionPerformed(evt);
            }
        });
        
        toolbar.add(execute);
        
        open.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Open16.gif")));
        open.setToolTipText("Open...");
        open.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                openActionPerformed(evt);
            }
        });
        
        toolbar.add(open);
        
        save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Save16.gif")));
        save.setToolTipText("Save As...");
        save.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                saveActionPerformed(evt);
            }
        });
        
        toolbar.add(save);
        
        getContentPane().add(toolbar, java.awt.BorderLayout.NORTH);
        
        split.setDividerLocation(100);
        split.setDividerSize(4);
        split.setResizeWeight(0.5);
        split.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        editor.setFont(new java.awt.Font("Courier New", 0, 12));
        scrollEditor.setViewportView(editor);
        
        split.setTopComponent(scrollEditor);
        
        jPanel1.setLayout(new java.awt.BorderLayout());
        
        tabbedResults.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        jPanel1.add(tabbedResults, java.awt.BorderLayout.CENTER);
        
        closeButton.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));
        
        closeIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/close.png")));
        closeIcon.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/closePressed.png")));
        closeIcon.setBorder(null);
        closeIcon.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                closeIconActionPerformed(evt);
            }
        });
        
        closeButton.add(closeIcon);
        
        jPanel1.add(closeButton, java.awt.BorderLayout.NORTH);
        
        split.setRightComponent(jPanel1);
        
        getContentPane().add(split, java.awt.BorderLayout.CENTER);
        
        setBounds(300, 75, 400, 300);
    }//GEN-END:initComponents

    private void closeIconActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_closeIconActionPerformed
    {//GEN-HEADEREND:event_closeIconActionPerformed
        tabbedResults.removeTabAt(tabbedResults.getSelectedIndex());
        
        if(tabbedResults.getTabCount() < 2) closeButton.setVisible(false);
    }//GEN-LAST:event_closeIconActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveActionPerformed
    {//GEN-HEADEREND:event_saveActionPerformed
        // Add your handling code here:
        try
        {
            Component parent = this;
            FileDialog dialog;
            PrintWriter out;
            String buffer = editor.getText();
            
            int data = 0;
            
            while(parent.getParent() != null) parent = parent.getParent();
            dialog = new FileDialog((Frame)parent, "Select name of SQL script...", FileDialog.SAVE);
            dialog.show(true);
            
            if(dialog.getFile() == null) return;
            
            out = new PrintWriter(new FileOutputStream(dialog.getDirectory()+dialog.getFile()));
            
            out.write(buffer);
            
            out.close();
        }
        catch(IOException e)
        {
            e.printStackTrace();
            
            Container parent = this;
            
            while(parent.getParent() != null) parent = parent.getParent();
            ErrorReport.displayError(e, (Frame)parent);
        }
    }//GEN-LAST:event_saveActionPerformed

    private void openActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_openActionPerformed
    {//GEN-HEADEREND:event_openActionPerformed
        // Add your handling code here:
        try
        {
            Component parent = this;
            FileDialog dialog;
            Reader in;
            StringBuffer buffer = new StringBuffer();
            
            int data = 0;
            
            while(parent.getParent() != null) parent = parent.getParent();
            dialog = new FileDialog((Frame)parent, "Select SQL script...", FileDialog.LOAD);
            dialog.show(true);
            
            if(dialog.getFile() == null) return;
            
            in = new BufferedReader(new InputStreamReader(new FileInputStream(dialog.getDirectory()+dialog.getFile())));
            
            while((data = in.read()) >= 0) buffer.append((char)data);
            
            if(buffer.length() > 0) editor.setText(buffer.toString());
            
            in.close();
        
        }
        catch(IOException e)
        {
            e.printStackTrace();
            
            Container parent = this;
            
            while(parent.getParent() != null) parent = parent.getParent();
            ErrorReport.displayError(e, (Frame)parent);
        }
        
    }//GEN-LAST:event_openActionPerformed

    private void executeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_executeActionPerformed
    {//GEN-HEADEREND:event_executeActionPerformed
        // Add your handling code here:
        try
        {
            StringBuffer text = new StringBuffer(editor.getText());
            String sql;
            int next = 0;
            
            clearTabs();
            
            while(next < text.length())
            {
                if(text.charAt(next) == ';')
                {
                    sql = text.substring(0, next);
                    text.delete(0, next+1);
                    next = 0;
                    
                    System.out.println(sql);
                    
                    if(sql.trim().length() > 0) addTab(sql.trim(), handler.performTableSQLQuery(sql));
                }
                else if(text.charAt(next) == '\'')
                {
                    next++;
                    
                    while(next < text.length() && text.charAt(next) != '\'')
                    {
                        if(next < text.length() && text.charAt(next) == '\\') next++;
                        next++;
                    }
                }
                
                next++;
            }
            
            System.out.println(text.toString());
            if(text.toString().trim().length() > 0) addTab(text.toString().trim(), handler.performTableSQLQuery(text.toString()));
        }
        catch(SQLException e)
        {
            e.printStackTrace();
            
            Container parent = this;
            
            while(parent.getParent() != null) parent = parent.getParent();
            ErrorReport.displayError(e, (Frame)parent);
        }
    }//GEN-LAST:event_executeActionPerformed


    private void clearTabs()
    {
        while(tabbedResults.getTabCount() > 0)
        {
            tabbedResults.removeTabAt(0);
        }
        
        closeButton.setVisible(false);
    }
    
    private void addTab(String sql, TableModel model)
    {
        String title;
        JScrollPane scroll = new JScrollPane();
        JTable table = new JTable();
     
        StringTokenizer tokenizer = new StringTokenizer(sql.trim());
        
        sql = "";
            
        while(tokenizer.hasMoreTokens()) sql += tokenizer.nextToken()+" ";
        
        title = sql;
        
        if(title.length() > 25) title = title.substring(0, 25)+"...";
        
        table.setAutoResizeMode(table.AUTO_RESIZE_OFF);
        table.setModel(model);
        scroll.setViewportView(table);
        
        tabbedResults.addTab(title, null, scroll, sql);
        
        if(tabbedResults.getTabCount() > 1) closeButton.setVisible(true);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar toolbar;
    private javax.swing.JButton execute;
    private javax.swing.JButton open;
    private javax.swing.JButton save;
    private javax.swing.JSplitPane split;
    private javax.swing.JScrollPane scrollEditor;
    private javax.swing.JTextPane editor;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTabbedPane tabbedResults;
    private javax.swing.JPanel closeButton;
    private javax.swing.JButton closeIcon;
    // End of variables declaration//GEN-END:variables

}
