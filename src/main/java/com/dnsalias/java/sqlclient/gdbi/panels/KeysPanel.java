/*
 * KeysPanel.java
 *
 * Created on September 30, 2002, 1:07 AM
 */

package com.dnsalias.java.sqlclient.gdbi.panels;

import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import java.util.*;

import javax.swing.*;
import javax.swing.border.*;
import javax.swing.event.*;
import javax.swing.table.*;

import com.dnsalias.java.sqlclient.*;
import com.dnsalias.java.sqlclient.dialog.*;
import com.dnsalias.java.sqlclient.gdbi.*;
import com.dnsalias.java.sqlclient.ui.*;
import com.dnsalias.java.sqlclient.util.*;

import com.datadino.sqlclient.ui.*;

/**
 *
 * @author  jbanes
 */
public class KeysPanel extends JPanel implements DatabaseInterfacePanel, ListSelectionListener
{
    private ImageIcon goldkey = new ImageIcon(getClass().getResource("/images/goldkeyicon.png"));
    private ImageIcon redkey = new ImageIcon(getClass().getResource("/images/redkeyicon.png"));
    private ImageIcon greenkey = new ImageIcon(getClass().getResource("/images/greenkeyicon.png"));
    
    private SQLClientHandler handler;
    private DBObject dbo;
    
    private PropertiesPanel info = new PropertiesPanel();
    private PropertiesPanel.PropertyList[] properties;
    
    private boolean loaded = false;
    
    private Icon rotate = new ImageIcon(getClass().getResource("/images/rotate.png"));
    
    private int querytime = 0;
    private int recordcount = 0;
    
    public KeysPanel(DBObject dbo) 
    {
        this.handler = SQLClientHandler.getCurrentHandler();
        this.dbo = dbo;
        
        initComponents();
        
        keysList.setCellRenderer(new IconCellRenderer());
        
        info.setBackground(Color.white);
        info.setOpaque(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents()//GEN-BEGIN:initComponents
    {
        splitPane = new javax.swing.JSplitPane();
        keysScroll = new javax.swing.JScrollPane();
        backgroundPanel = new javax.swing.JPanel();
        keysList = new javax.swing.JList();
        infoPanel = new javax.swing.JPanel();
        keyInfoHeader = new javax.swing.JLabel();
        infoScroll = new javax.swing.JScrollPane();
        
        setLayout(new java.awt.BorderLayout());
        
        splitPane.setDividerLocation(130);
        splitPane.setDividerSize(4);
        splitPane.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(3, 3, 3, 3)));
        splitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        keysScroll.setBackground(java.awt.Color.white);
        keysScroll.setOpaque(false);
        backgroundPanel.setLayout(new java.awt.BorderLayout());
        
        backgroundPanel.setBackground(java.awt.Color.white);
        keysList.setOpaque(false);
        backgroundPanel.add(keysList, java.awt.BorderLayout.CENTER);
        
        keysScroll.setViewportView(backgroundPanel);
        
        splitPane.setTopComponent(keysScroll);
        
        infoPanel.setLayout(new java.awt.BorderLayout());
        
        infoPanel.setBorder(new javax.swing.border.EtchedBorder());
        keyInfoHeader.setText(" Key Info");
        keyInfoHeader.setBorder(new javax.swing.border.MatteBorder(new java.awt.Insets(0, 0, 1, 0), new java.awt.Color(180, 180, 180)));
        infoPanel.add(keyInfoHeader, java.awt.BorderLayout.NORTH);
        
        infoScroll.setBorder(null);
        infoScroll.setBackground(java.awt.Color.white);
        infoPanel.add(infoScroll, java.awt.BorderLayout.CENTER);
        
        splitPane.setBottomComponent(infoPanel);
        
        add(splitPane, java.awt.BorderLayout.CENTER);
        
    }//GEN-END:initComponents

    public void deactivate()
    {
    }    

    public JComponent getPanel()
    {
        return this;
    }    

    public boolean isSaved()
    {
        return true;
    }
    
    private void loadPrimaryKeys(DefaultListModel model) throws SQLException
    {
        SQLClientHandler handler = this.handler.getConnection();
        DatabaseMetaData meta = handler.getMetaData();
        ResultSet set;
        Hashtable table = new Hashtable();
        Enumeration keys;

        PrimaryKey key;
        String name;
        
        set = meta.getPrimaryKeys(dbo.getDatabase(), dbo.getSchema(), dbo.getName());
            
        while(set.next())
        {
            name = set.getString("PK_NAME");

            if(name == null) name = "Primary Key";

            if(table.containsKey(name)) 
            {
                key = (PrimaryKey)table.get(name);
            }
            else 
            {
                key = new PrimaryKey(name);
                key.setIcon(goldkey);
            }

            key.addColumn(set.getString("COLUMN_NAME"));
            
            table.put(name, key);
        }

        keys = table.keys();
        
        while(keys.hasMoreElements()) model.addElement(table.get(keys.nextElement()));
        
        set.close();
        handler.completeOperation();
    }
    
    private void loadImportedKeys(DefaultListModel model) throws SQLException
    {
        SQLClientHandler handler = this.handler.getConnection();
        DatabaseMetaData meta = handler.getMetaData();
        ResultSet set;
        Hashtable table = new Hashtable();
        Enumeration keys;

        ImportedKey key;
        String name;
        
        int counter = 1;

        set = meta.getImportedKeys(dbo.getDatabase(), dbo.getSchema(), dbo.getName());

        while(set.next())
        {
            name = set.getString("FK_NAME");

            if(name == null) 
            {
                if(counter > 1) name = "Imported Foreign Key ("+counter+")";
                else name = "Imported Foreign Key";

                counter++;
            }

            if(table.containsKey(name)) 
            {
                key = (ImportedKey)table.get(name);
            }
            else 
            {
                key = new ImportedKey(name);
                key.setIcon(redkey);
            }

            key.addColumn(set.getString("FKCOLUMN_NAME"));
            key.setPrimaryKeyName(set.getString("PK_NAME"));
            key.setPrimaryKeyTable(SQLNormalizer.combineSchemaTable(set.getString("PKTABLE_SCHEM"), set.getString("PKTABLE_NAME")));
            key.addPimaryKeyColumn(set.getString("PKCOLUMN_NAME"));
            key.setUpdateRule(set.getShort("UPDATE_RULE"));
            key.setDeleteRule(set.getShort("DELETE_RULE"));
            key.setDeferrable(set.getShort("DEFERRABILITY"));
            
            table.put(name, key);
        }
        
        keys = table.keys();
        
        while(keys.hasMoreElements()) model.addElement(table.get(keys.nextElement()));

        set.close();
        handler.completeOperation();
    }
    
    private void loadExportedKeys(DefaultListModel model) throws SQLException
    {
        SQLClientHandler handler = this.handler.getConnection();
        DatabaseMetaData meta = handler.getMetaData();
        ResultSet set;
        Hashtable table = new Hashtable();
        Enumeration keys;

        ExportedKey key;
        String name;
        
        int counter = 1;

        set = meta.getExportedKeys(dbo.getDatabase(), dbo.getSchema(), dbo.getName());

        while(set.next())
        {
            name = set.getString("FK_NAME");

            if(name == null) 
            {
                if(counter > 1) name = "Exported Foreign Key ("+counter+")";
                else name = "Exported Foreign Key";

                counter++;
            }

            if(table.containsKey(name)) 
            {
                key = (ExportedKey)table.get(name);
            }
            else 
            {
                key = new ExportedKey(name);
                key.setIcon(greenkey);
            }

            key.addColumn(set.getString("PKCOLUMN_NAME"));
            key.setForeignKeyName(set.getString("FK_NAME"));
            key.setForeignKeyTable(SQLNormalizer.combineSchemaTable(set.getString("FKTABLE_SCHEM"), set.getString("FKTABLE_NAME")));
            key.addForeignKeyColumn(set.getString("FKCOLUMN_NAME"));
            key.setUpdateRule(set.getShort("UPDATE_RULE"));
            key.setDeleteRule(set.getShort("DELETE_RULE"));
            key.setDeferrable(set.getShort("DEFERRABILITY"));
            
            table.put(name, key);
        }
        
        keys = table.keys();
        
        while(keys.hasMoreElements()) model.addElement(table.get(keys.nextElement()));

        set.close();
        handler.completeOperation();
    }
    
    public void activate()
    {
        if(loaded) 
        {
            displayMetrics();
            return;
        }
        
        try
        {
            DefaultListModel model = new DefaultListModel();
            DBKey key;
            String[] columns;
            PreparedStatement statement;
            ResultSet result;
            String sqlsuffix;
            long timer;
            
            JStatusBar.setText(this, "Loading...", rotate, 0);
            
            timer = System.currentTimeMillis();
            
            loadPrimaryKeys(model);
            loadImportedKeys(model);
            loadExportedKeys(model);
            
            querytime = (int)(System.currentTimeMillis()-timer);
            
            keysList.setModel(model);
            
            recordcount = model.size();
            properties = new PropertiesPanel.PropertyList[model.getSize()];
            
            for(int i=0; i<properties.length; i++)
            {
                key = (DBKey)keysList.getModel().getElementAt(i);
                properties[i] = info.createList();
                
                properties[i].addProperty("Type", key.getType());
                
                columns = key.getColumns();
                
                if(columns.length > 0) properties[i].addProperty("Column(s)", processStringArray(columns));
                
                if(key instanceof ImportedKey) addImportedInfo((ImportedKey)key, properties[i]);
                if(key instanceof ExportedKey) addExportedInfo((ExportedKey)key, properties[i]);
            }
            
            keysList.addListSelectionListener(this);
            infoScroll.setViewportView(info);
            
            loaded = true;
            
            displayMetrics();
            JStatusBar.setText(this, "Ready", 0);
        }
        catch(SQLException e)
        {
            e.printStackTrace();
            ErrorReport.displayError(e, this);
        }
    }
    
    private void displayMetrics()
    {
        JStatusBar.setText(this, recordcount+" key(s)", 1);
        JStatusBar.setText(this, querytime+" ms", 2);
    }
    
    private String processStringArray(String[] data)
    {
        String text = "";
                
        for(int i=0; i<data.length; i++)
        {
            if(i>0) text += "\n";
            text += data[i];
        }
        
        return text;
    }
    
    private void addImportedInfo(ImportedKey key, PropertiesPanel.PropertyList properties)
    {
        properties.addProperty("Foreign Key",  key.getPrimaryKeyName());
        properties.addProperty("Foreign Table", key.getPrimaryKeyTable());
        properties.addProperty("Foreign Columns", processStringArray(key.getPrimaryKeyColumns()));
        properties.addProperty("On Update", key.getUpdateRule());
        properties.addProperty("On Delete", key.getDeleteRule());
        properties.addProperty("Deferrability", key.getDeferrable());
    }
    
    private void addExportedInfo(ExportedKey key, PropertiesPanel.PropertyList properties)
    {
        properties.addProperty("Foreign Key",  key.getForeignKeyName());
        properties.addProperty("Foreign Table", key.getForeignKeyTable());
        properties.addProperty("Foreign Columns", processStringArray(key.getForeignKeyColumns()));
        properties.addProperty("On Update", key.getUpdateRule());
        properties.addProperty("On Delete", key.getDeleteRule());
        properties.addProperty("Deferrability", key.getDeferrable());
    }
    
    public void saveChanges()
    {
    }
    
    public void valueChanged(ListSelectionEvent listSelectionEvent)
    {
        if(keysList.getSelectedIndex() < 0)
        {
            info.removeAll();
            return;
        }
        
        info.display(properties[keysList.getSelectedIndex()]);
    }
    
    private class IconCellRenderer extends JLabel implements ListCellRenderer 
    {
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus)
        {
            DBKey dbkey = (DBKey)value;
            
            setText(dbkey.getName());
            setIcon(dbkey.getIcon());
   	   
            if (isSelected) 
            {
                setBackground(list.getSelectionBackground());
                setForeground(list.getSelectionForeground());
            }
            else 
            {
                setBackground(list.getBackground());
                setForeground(list.getForeground());
            }
            
            setEnabled(list.isEnabled());
            setFont(list.getFont());
            setOpaque(true);
            return this;
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JScrollPane keysScroll;
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JList keysList;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JLabel keyInfoHeader;
    private javax.swing.JScrollPane infoScroll;
    // End of variables declaration//GEN-END:variables

}
