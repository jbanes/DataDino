/*
 * IndexPanel.java
 *
 * Created on November 3, 2002, 10:45 PM
 */

package com.dnsalias.java.sqlclient.gdbi.panels;

import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import java.util.*;

import javax.swing.*;
import javax.swing.border.*;
import javax.swing.event.*;
import javax.swing.table.*;

import com.dnsalias.java.sqlclient.*;
import com.dnsalias.java.sqlclient.dialog.*;
import com.dnsalias.java.sqlclient.gdbi.*;
import com.dnsalias.java.sqlclient.ui.*;
import com.dnsalias.java.sqlclient.util.*;

import com.datadino.sqlclient.ui.*;

/**
 *
 * @author  jbanes
 */
public class IndexPanel extends JPanel implements DatabaseInterfacePanel, ListSelectionListener
{    
    
    private SQLClientHandler handler;
    private DBObject dbo;
    
    private PropertiesPanel info = new PropertiesPanel();
    private PropertiesPanel.PropertyList[] properties;
    
    private int counter = 1;
    private boolean loaded = false;
    
    private Icon rotate = new ImageIcon(getClass().getResource("/images/rotate.png"));
    
    private int querytime = 0;
    private int recordcount = 0;
    
    public IndexPanel(DBObject dbo) 
    {
        this.handler = SQLClientHandler.getCurrentHandler();
        this.dbo = dbo;
        
        initComponents();
        
        indexesList.setCellRenderer(new IconCellRenderer());
        
        info.setBackground(Color.white);
        info.setOpaque(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents()//GEN-BEGIN:initComponents
    {
        jSplitPane1 = new javax.swing.JSplitPane();
        indexesScroll = new javax.swing.JScrollPane();
        backgroundPanel = new javax.swing.JPanel();
        indexesList = new javax.swing.JList();
        indexesPanel = new javax.swing.JPanel();
        indexInfoHeader = new javax.swing.JLabel();
        infoScroll = new javax.swing.JScrollPane();
        
        setLayout(new java.awt.BorderLayout());
        
        jSplitPane1.setDividerLocation(130);
        jSplitPane1.setDividerSize(4);
        jSplitPane1.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(3, 3, 3, 3)));
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        indexesScroll.setBackground(java.awt.Color.white);
        backgroundPanel.setLayout(new java.awt.BorderLayout());
        
        backgroundPanel.setBackground(java.awt.Color.white);
        indexesList.setOpaque(false);
        backgroundPanel.add(indexesList, java.awt.BorderLayout.CENTER);
        
        indexesScroll.setViewportView(backgroundPanel);
        
        jSplitPane1.setLeftComponent(indexesScroll);
        
        indexesPanel.setLayout(new java.awt.BorderLayout());
        
        indexesPanel.setBorder(new javax.swing.border.EtchedBorder());
        indexInfoHeader.setText(" Index Info");
        indexInfoHeader.setBorder(new javax.swing.border.MatteBorder(new java.awt.Insets(0, 0, 1, 0), new java.awt.Color(180, 180, 180)));
        indexesPanel.add(indexInfoHeader, java.awt.BorderLayout.NORTH);
        
        infoScroll.setBorder(null);
        indexesPanel.add(infoScroll, java.awt.BorderLayout.CENTER);
        
        jSplitPane1.setRightComponent(indexesPanel);
        
        add(jSplitPane1, java.awt.BorderLayout.CENTER);
        
    }//GEN-END:initComponents

    public void deactivate()
    {
    }    

    public JComponent getPanel()
    {
        return this;
    }    

    public boolean isSaved()
    {
        return true;
    }
    
    private void loadIndexes(DefaultListModel model) throws SQLException
    {
        DatabaseMetaData meta = handler.getMetaData();
        ResultSet set;
        Hashtable table = new Hashtable();
        Enumeration indexes;

        Index index;
        String name;
        String column;
        
        set = meta.getIndexInfo(dbo.getDatabase(), dbo.getSchema(), dbo.getName(), false, true);
            
        while(set.next())
        {
            name = set.getString("INDEX_NAME");

            if(name == null) 
            {
                name = "Index"+counter;
                counter++;
            }

            if(table.containsKey(name)) 
            {
                index = (Index)table.get(name);
            }
            else 
            {
                index = new Index(name);
            }

            column = set.getString("COLUMN_NAME");
            if(column != null) index.addColumn(column);
            index.setType(set.getShort("TYPE"));
            index.setUnique(!set.getBoolean("NON_UNIQUE"));
            index.setSorting(set.getString("ASC_OR_DESC"));
            index.setCardinality(set.getInt("CARDINALITY"));
            index.setPages(set.getInt("PAGES"));
            index.setFilter(set.getString("FILTER_CONDITION"));
            
            table.put(name, index);
        }

        indexes = table.keys();
        
        while(indexes.hasMoreElements()) model.addElement(table.get(indexes.nextElement()));
        
        set.close();
    }
    
    public void activate()
    {
        if(loaded) 
        {
            displayMetrics();
            return;
        }
        
        try
        {
            DefaultListModel model = new DefaultListModel();
            Index index;
            String[] columns;
            PreparedStatement statement;
            ResultSet result;
            String sqlsuffix;
            long timer;
            
            JStatusBar.setText(this, "Loading...", rotate, 0);
            
            timer = System.currentTimeMillis();
            
            loadIndexes(model);
            
            querytime = (int)(System.currentTimeMillis()-timer);
            
            indexesList.setModel(model);
            
            recordcount = model.size();
            properties = new PropertiesPanel.PropertyList[model.getSize()];
            
            for(int i=0; i<properties.length; i++)
            {
                index = (Index)indexesList.getModel().getElementAt(i);
                properties[i] = info.createList();
                
                properties[i].addProperty("Type", index.getType());
                
                columns = index.getColumns();
                
                if(columns.length > 0) properties[i].addProperty("Column(s)", processStringArray(columns));
                
                properties[i].addProperty("Sorting Order", index.getSorting());
                properties[i].addProperty("Unique", (index.getUnique()+"").toUpperCase());
                properties[i].addProperty("Cardinality", index.getCardinality()+"");
                properties[i].addProperty("Pages", index.getPages()+"");
                properties[i].addProperty("Filter", index.getFilter());
            }
            
            indexesList.addListSelectionListener(this);
            infoScroll.setViewportView(info);
            
            loaded = true;
            
            displayMetrics();
            JStatusBar.setText(this, "Ready", 0);
        }
        catch(SQLException e)
        {
            e.printStackTrace();
            ErrorReport.displayError(e, this);
        }
    }
    
    private void displayMetrics()
    {
        JStatusBar.setText(this, recordcount+" index(s)", 1);
        JStatusBar.setText(this, querytime+" ms", 2);
    }
    
    private String processStringArray(String[] data)
    {
        String text = "";
                
        for(int i=0; i<data.length; i++)
        {
            if(i>0) text += "\n";
            text += data[i];
        }
        
        return text;
    }
    
    public void saveChanges()
    {
    }
    
    public void valueChanged(ListSelectionEvent event)
    {
        if(indexesList.getSelectedIndex() < 0)
        {
            info.removeAll();
            return;
        }
        
        info.display(properties[indexesList.getSelectedIndex()]);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JScrollPane indexesScroll;
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JList indexesList;
    private javax.swing.JPanel indexesPanel;
    private javax.swing.JLabel indexInfoHeader;
    private javax.swing.JScrollPane infoScroll;
    // End of variables declaration//GEN-END:variables
    
    private class IconCellRenderer extends JLabel implements ListCellRenderer 
    {
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus)
        {
            Index idx = (Index)value;
            
            setText(idx.getName());
            setIcon(idx.getIcon());
            setBorder(new EmptyBorder(1, 2, 1, 2));
   	   
            if (isSelected) 
            {
                setBackground(list.getSelectionBackground());
                setForeground(list.getSelectionForeground());
            }
            else 
            {
                setBackground(list.getBackground());
                setForeground(list.getForeground());
            }
            
            setEnabled(list.isEnabled());
            setFont(list.getFont());
            setOpaque(true);
            return this;
        }
    }
}
