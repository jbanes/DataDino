/*
 * TableDataPanel.java
 *
 * Created on September 17, 2002, 8:37 PM
 */

package com.dnsalias.java.sqlclient.gdbi.panels;

import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import java.util.*;

import javax.swing.*;
import javax.swing.event.*;
import javax.swing.table.*;

import com.dnsalias.java.sqlclient.*;
import com.dnsalias.java.sqlclient.dialog.*;
import com.dnsalias.java.sqlclient.gdbi.*;
import com.dnsalias.java.sqlclient.util.*;
import com.dnsalias.java.sqlclient.ui.*;

import com.datadino.sqlclient.ui.*;
import com.datadino.sqlclient.util.*;

/**
 *
 * @author  jbanes
 */
public class TableDataPanel extends JPanel implements DatabaseInterfacePanel, TableModelListener
{
    private static String lock = "DataDino Column Lock";
    
    private SQLClientHandler handler;
    private DBObject dbo;
    private boolean cached = false;
    private Vector commits = new Vector();
    private String filter = "";
    private PopupHandler popHandle;
    
    private Icon rotate = new ImageIcon(getClass().getResource("/images/rotate.png"));
    
    private int querytime = 0;
    private int recordcount = 0;
    private int rowsSelected = 0;
    
    public TableDataPanel(DBObject dbo) 
    {
        this.handler = SQLClientHandler.getCurrentHandler();
        this.dbo = dbo;
        
        initComponents();
        
        tableData.getColumnModel().addColumnModelListener(new TableDataPanel.ColumnListener());
        
        //FancyToolbar tbar = new FancyToolbar();
        MultiplexedToolbar tbar = new MultiplexedToolbar();
        Component[] comp = toolbar.getComponents();
        
        for(int i=0; i<comp.length; i++) 
        {
            toolbar.remove(comp[i]);
            tbar.add(comp[i]);
        }
        
        tbar.getToolbar().revalidate();
        
        remove(toolbar);
        add(tbar.getToolbar(), BorderLayout.NORTH);
        
        tableData.getSelectionModel().addListSelectionListener(new RowSelectionListener());
        popHandle = new PopupHandler(tableData);
            
        deleteRecord.setEnabled((rowsSelected > 0));
        popHandle.deleteRecord.setEnabled((rowsSelected > 0));
        popHandle.rollbackChanges.setEnabled(false);
        popHandle.commitChanges.setEnabled(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        toolbar = new javax.swing.JToolBar();
        newRecord = new javax.swing.JButton();
        deleteRecord = new javax.swing.JButton();
        refresh = new javax.swing.JButton();
        filterData = new javax.swing.JButton();
        commit = new javax.swing.JButton();
        rollback = new javax.swing.JButton();
        scrollPane = new javax.swing.JScrollPane();
        tableData = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        newRecord.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Add16.gif")));
        newRecord.setToolTipText("Add Record");
        newRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newRecordActionPerformed(evt);
            }
        });

        toolbar.add(newRecord);

        deleteRecord.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Delete16.gif")));
        deleteRecord.setToolTipText("Delete Selected Record(s)");
        deleteRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRecordActionPerformed(evt);
            }
        });

        toolbar.add(deleteRecord);

        refresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Refresh16.gif")));
        refresh.setToolTipText("Refresh");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });

        toolbar.add(refresh);

        filterData.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Search16.gif")));
        filterData.setToolTipText("Filter/Sort");
        filterData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterDataActionPerformed(evt);
            }
        });

        toolbar.add(filterData);

        commit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Save16.gif")));
        commit.setToolTipText("Commit");
        commit.setEnabled(false);
        commit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commitActionPerformed(evt);
            }
        });

        toolbar.add(commit);

        rollback.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/media/Rewind16.gif")));
        rollback.setToolTipText("Roll Back Change(s)");
        rollback.setEnabled(false);
        rollback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rollbackActionPerformed(evt);
            }
        });

        toolbar.add(rollback);

        add(toolbar, java.awt.BorderLayout.SOUTH);

        tableData.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        scrollPane.setViewportView(tableData);

        add(scrollPane, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents

    private void filterDataActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_filterDataActionPerformed
    {//GEN-HEADEREND:event_filterDataActionPerformed
        Container parent = this;
        
        while(parent.getParent() != null) parent = parent.getParent();
        
        filter = FilterDialog.getFilter(dbo, filter, handler, (Frame)parent);
        refreshActionPerformed(evt);
    }//GEN-LAST:event_filterDataActionPerformed

    private void deleteRecordActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteRecordActionPerformed
    {//GEN-HEADEREND:event_deleteRecordActionPerformed
        try
        {
            int[] rows = tableData.getSelectedRows();
            int columns = tableData.getColumnCount();
        
            String message = "Are you sure you wish to delete these\n"
                             + "rows? This change cannot be undone!";
        
            int selected = JOptionPane.showConfirmDialog(this, message);
        
            if(selected != JOptionPane.YES_OPTION) return;
            if(rows.length == 0) return;
            
            for(int row=0; row<rows.length; row++)
            {
                String SQL = "delete from "+dbo.getDelimitedString()+" where ";
                Object[] data = new Object[columns];
                String[] columnNames = handler.getDatabaseColumnList(dbo);
                Object temp;
                
                boolean first = false;

                for(int i=0; i<data.length; i++)
                {
                    data[i] = tableData.getModel().getValueAt(rows[row], i);

                    if(data[i] != null)
                    {
                        if(first) SQL += " AND ";
                        first = true;
                        SQL += SQLNormalizer.columnName(columnNames[i], handler)+" = ?";
                    }
                }

                System.out.println(SQL);
                
                if(first) 
                {
                    PreparedStatement statement = handler.createPreparedStatement(SQL);
                    
                    for(int i=0, count=1; i<data.length; i++)
                    {
                        if(data[i] != null)
                        {
                            statement.setObject(count, data[i]);
                            count++;
                        }
                    }
                    
                    statement.executeUpdate();
                }
            }
            
            refreshActionPerformed(evt);
        }
        catch(SQLException e)
        {
            e.printStackTrace();
            
            Container parent = this;
        
            while(parent.getParent() != null) parent = parent.getParent();
            
            ErrorReport.displayError(e, (Frame)parent);
        }
    }//GEN-LAST:event_deleteRecordActionPerformed

    private void refreshActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_refreshActionPerformed
    {//GEN-HEADEREND:event_refreshActionPerformed
        DBTableModel model;
        PreparedStatement statement;
        ResultSet result;
        String sqlsuffix;
        String countfilter = this.filter;
        long timer;
        
        if(warnDataLoss()) return;
        if(countfilter.indexOf("ORDER BY") >= 0) countfilter = countfilter.substring(0, countfilter.indexOf("ORDER BY"));
        
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        
        try
        {   
            JStatusBar.setText(this, "Loading...", rotate, 0);
            
            //if(dbo.getSchema() != null && dbo.getSchema().trim().length() > 0) 
                sqlsuffix = dbo.getDelimitedString();
            //else 
            //    sqlsuffix = SQLNormalizer.tableName(dbo.getName(), handler);
            
            System.out.println("select count(*) from "+sqlsuffix+countfilter);
            statement = handler.createPreparedStatement("select count(*) from "+sqlsuffix+countfilter);
            result = statement.executeQuery();

            System.gc();
            System.runFinalization();
            
            result.next();
            recordcount = result.getInt(1);
            result.close();

            timer = System.currentTimeMillis();
            model = (DBTableModel)handler.performTableSQLQuery("select * from "+sqlsuffix+filter);
            
            model.setTotalRows(recordcount);
            model.setComponent(this);
            tableData.setModel(model);
            querytime = (int)(System.currentTimeMillis()-timer);
            
            tableData.getModel().addTableModelListener(this);
            
            displayMetrics();
            
            synchronized(lock)
            {
                ApplicationSettings settings = ApplicationSettings.getInstance();
                Hashtable info = (Hashtable)settings.loadPersistentObject("ColumnInfo");
                ColumnHeaderInfo headerInfo;
                
                if(info != null)
                {
                    headerInfo = (ColumnHeaderInfo)info.get(dbo);
                    if(headerInfo != null) headerInfo.restore(tableData.getColumnModel());
                }
            }
            
            JStatusBar.setText(this, "Ready", 0);
        }
        catch(SQLException e)
        {
            e.printStackTrace();
            
            ErrorReport.displayError(e, this);
        }
        finally
        {
            setCursor(Cursor.getDefaultCursor());
        }
    }//GEN-LAST:event_refreshActionPerformed

    private void rollbackActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rollbackActionPerformed
    {//GEN-HEADEREND:event_rollbackActionPerformed
        commits.clear();
        
        commit.setEnabled(false);
        rollback.setEnabled(false);
        
        popHandle.commitChanges.setEnabled(false);
        popHandle.rollbackChanges.setEnabled(false);
        
        if(evt != null) refreshActionPerformed(evt);
    }//GEN-LAST:event_rollbackActionPerformed

    private void commitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_commitActionPerformed
    {//GEN-HEADEREND:event_commitActionPerformed
        try
        {
            try{handler.setAutoCommit(false);} catch(SQLException e) {e.printStackTrace();}
            
            ((DBTableModel)tableData.getModel()).commitChanges(handler, dbo);
            
            while(commits.size() > 0)
            {
                ((NewRecordHandler)commits.elementAt(0)).commit();
                commits.remove(0);
            }
            
            commit.setEnabled(false);
            rollback.setEnabled(false);
            
            popHandle.commitChanges.setEnabled(true);
            popHandle.rollbackChanges.setEnabled(true);
            
            handler.commit();
        }
        catch(SQLException e)
        {
            e.printStackTrace();
            
            Container parent = this;
        
            while(parent.getParent() != null) parent = parent.getParent();
            
            ErrorReport.displayError(e, (Frame)parent);
        }
        finally
        {
            try
            {
                handler.rollback();
                handler.setAutoCommit(true);
            }
            catch(SQLException sqle) {sqle.printStackTrace();}
        }
    }//GEN-LAST:event_commitActionPerformed

    private void newRecordActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_newRecordActionPerformed
    {//GEN-HEADEREND:event_newRecordActionPerformed
        int row = ((DBTableModel)tableData.getModel()).addRow();
        NewRecordHandler recordHandler = new NewRecordHandler(row, dbo.getDelimitedString(), handler);
        
        recordHandler.add(tableData.getModel());
        recordHandler.add(tableData.getSelectionModel());
        tableData.changeSelection(row, 0, false, false);
        
        for(int i=0; i<commits.size(); i++) ((NewRecordHandler)commits.get(i)).rowAdded();
        
        commit.setEnabled(true);
        rollback.setEnabled(true);
        
        popHandle.commitChanges.setEnabled(true);
        popHandle.rollbackChanges.setEnabled(true);
        
        commits.add(recordHandler);
    }//GEN-LAST:event_newRecordActionPerformed

    public void deactivate()
    {
    }    

    public JComponent getPanel()
    {
        return this;
    }    

    public boolean isSaved()
    {
        return !commit.isEnabled();
    }
    
    public void activate()
    {
        PreparedStatement statement;
        ResultSet result;
        String sqlsuffix;
        long timer;
        
        try
        {
            if(cached) 
            {
                displayMetrics();
                return;
            }
            
            refreshActionPerformed(null);
            
            cached = true;
        }
        catch(Exception e)
        {
            e.printStackTrace();
            ErrorReport.displayError(e, this);
        }
    }
    
    private void displayMetrics()
    {
        JStatusBar.setText(this, recordcount+" row(s)", 1);
        
        if(rowsSelected > 0) JStatusBar.setText(this, rowsSelected+" rows selected", 2);
        else JStatusBar.setText(this, querytime+" ms", 2);
    }
    
    public void saveChanges()
    {
        commitActionPerformed(null);
    }
    
    public void tableChanged(TableModelEvent evt)
    {
        if(((DBTableModel)tableData.getModel()).isUpdated())
        {
            commit.setEnabled(true);
            rollback.setEnabled(true);
            
            popHandle.commitChanges.setEnabled(true);
            popHandle.rollbackChanges.setEnabled(true);
        }
    }    
    
    private boolean warnDataLoss()
    {
        if(!commit.isEnabled()) return false;
        
        String message = "Your changes to the database will be lost after\n"
                          + "this action! Would you like to commit first?";
        
        int selected = JOptionPane.showConfirmDialog(this, message);
        
        if(selected == JOptionPane.YES_OPTION)
        {
            commitActionPerformed(null);
        }
        else if(selected == JOptionPane.NO_OPTION)
        {
            rollbackActionPerformed(null);
        }
        else
        {
            return true;
        }
        
        return false;
    }
    
    private class ColumnListener implements TableColumnModelListener, Runnable
    {
        boolean running = false;
        
        /** Tells listeners that a column was added to the model.  */
        public void columnAdded(TableColumnModelEvent e) {}
        
        /** Tells listeners that a column was moved due to a margin change.  */
        public void columnMarginChanged(ChangeEvent e) 
        {
            if(running) return;
            
            synchronized(lock)
            {
                running = true;
                ThreadPool.run(this);
            }
        }
        
        /** Tells listeners that a column was repositioned.  */
        public void columnMoved(TableColumnModelEvent e) 
        {
            if(running) return;
            
            synchronized(lock)
            {
                running = true;
                ThreadPool.run(this);
            }
        }
        
        /** Tells listeners that a column was removed from the model.  */
        public void columnRemoved(TableColumnModelEvent e) {}
        
        /** Tells listeners that the selection model of the
         * TableColumnModel changed.
         *
         */
        public void columnSelectionChanged(ListSelectionEvent e) {}
        
        /** When an object implementing interface <code>Runnable</code> is used
         * to create a thread, starting the thread causes the object's
         * <code>run</code> method to be called in that separately executing
         * thread.
         * <p>
         * The general contract of the method <code>run</code> is that it may
         * take any action whatsoever.
         *
         * @see     java.lang.Thread#run()
         *
         */
        public void run() 
        {
            try{Thread.sleep(500);} catch(Exception e) {}
            
            synchronized(lock)
            {
                ApplicationSettings settings = ApplicationSettings.getInstance();
                Hashtable info = (Hashtable)settings.loadPersistentObject("ColumnInfo");
                
                if(info == null) info = new Hashtable();
                
                info.put(dbo, new ColumnHeaderInfo(tableData.getColumnModel()));
                
                settings.savePersistentObject("ColumnInfo", info);
                
                running = false;
            }
        }
        
    }
    
    private class RowSelectionListener implements ListSelectionListener
    {
        public void valueChanged(ListSelectionEvent evt)
        {
            rowsSelected = tableData.getSelectedRowCount();
            displayMetrics();
            
            deleteRecord.setEnabled((rowsSelected > 0));
            popHandle.deleteRecord.setEnabled((rowsSelected > 0));
        }
    }
    
    private class PopupHandler implements MouseListener, ActionListener, PopupMenuListener
    {
        private JComponent comp;
        private JPopupMenu menu = new JPopupMenu();
        
        private JMenuItem newRecord = new JMenuItem("Add Record");
        private JMenuItem filterData = new JMenuItem("Filter/Sort Data");
        private JMenuItem refreshData = new JMenuItem("Refresh Data");
        private JMenuItem rollbackChanges = new JMenuItem("Rollback Changes");
        private JMenuItem commitChanges = new JMenuItem("Commit Changes");
        private JMenuItem deleteRecord = new JMenuItem("Delete Record(s)");
        
        public PopupHandler(JComponent comp)
        {
            this.comp = comp;
            
            comp.addMouseListener(this);
            
            newRecord.addActionListener(this);
            filterData.addActionListener(this);
            refreshData.addActionListener(this);
            rollbackChanges.addActionListener(this);
            commitChanges.addActionListener(this);
            deleteRecord.addActionListener(this);
            
            menu.add(newRecord);
            menu.addSeparator();
            menu.add(filterData);
            menu.add(refreshData);
            menu.addSeparator();
            menu.add(rollbackChanges);
            menu.add(commitChanges);
            menu.addSeparator();
            menu.add(deleteRecord);
            
            menu.addPopupMenuListener(this);
        }
        
        public void actionPerformed(ActionEvent evt)
        {   
            if(evt.getSource() == newRecord) newRecordActionPerformed(new ActionEvent(comp, 0, "New Record"));
            if(evt.getSource() == filterData) filterDataActionPerformed(new ActionEvent(comp, 0, "Filter"));
            if(evt.getSource() == refreshData) refreshActionPerformed(new ActionEvent(comp, 0, "Refresh"));
            if(evt.getSource() == rollbackChanges) rollbackActionPerformed(new ActionEvent(comp, 0, "Rollback"));
            if(evt.getSource() == commitChanges) commitActionPerformed(new ActionEvent(comp, 0, "Commit"));
            if(evt.getSource() == deleteRecord) deleteRecordActionPerformed(new ActionEvent(comp, 0, "Delete"));
        }
        
        public void mouseExited(MouseEvent mouseEvent)
        {
        }
        
        public void mouseReleased(MouseEvent evt)
        {   
            if(evt.isPopupTrigger())
            {
                menu.show(comp, evt.getX(), evt.getY());
            }
        }
        
        public void mousePressed(MouseEvent evt)
        {
            if(evt.isPopupTrigger()) 
            {
                menu.show(comp, evt.getX(), evt.getY());
            }
        }
        
        public void mouseClicked(MouseEvent mouseEvent)
        {
        }
        
        public void mouseEntered(MouseEvent mouseEvent)
        {
        }
        
        public void popupMenuCanceled(PopupMenuEvent evt)
        {
        }
        
        public void popupMenuWillBecomeInvisible(PopupMenuEvent evt)
        {
        }
        
        public void popupMenuWillBecomeVisible(PopupMenuEvent evt)
        {
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton newRecord;
    private javax.swing.JToolBar toolbar;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JButton rollback;
    private javax.swing.JButton filterData;
    private javax.swing.JTable tableData;
    private javax.swing.JButton deleteRecord;
    private javax.swing.JButton commit;
    private javax.swing.JButton refresh;
    // End of variables declaration//GEN-END:variables

}
